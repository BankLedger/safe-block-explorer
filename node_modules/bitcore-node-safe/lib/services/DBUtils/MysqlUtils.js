"use strict";

var mysql = require("mysql");

function MysqlUtils(mysqlConf) {
    this.connection = mysql.createConnection(mysqlConf);
    this.connection.connect();
}

MysqlUtils.prototype.subStrLastTowTurnUpperCase = function (str) {
    return str.substr(str.length - 2, str.length).toLocaleUpperCase()
};

// get data for bitcored start -------------------------------------------------------
/**
 * 查询地址锁定的总金额
 * 传入的参数，可以分页，排序(锁定金额和时间)
 * @param params
 * @param cb
 */
MysqlUtils.prototype.getAddressLockedTotal = function (params, cb) {
    var sql = "SELECT SUM(lockedVal) AS lockeVal, address, COUNT(id) AS lockCount " +
        "FROM lockedAddresses " +
        "WHERE unlockedHeight > ? " +
        "GROUP BY address " +
        "ORDER BY lockeVal  " + params.order +
        " LIMIT ?,10 ";
    var option = [params.unlockedHeight, params.start];
    this.sql(sql, option, function (err, result) {
        if (err) {
            console.log("get address locked total err " + JSON.stringify(err));
            cb(err);
        }
        cb(null, result);
    })
};

/**
 * 获取地址 资产锁定列表
 * @param params
 * @param cb
 */
MysqlUtils.prototype.getAssetLockedTotalForAssetName = function (params, cb) {
    var sql = "SELECT SUM(lockedVal) AS lockeVal, address, COUNT(id) AS lockCount " +
        "FROM lockedAssetAddress " +
        "WHERE unlockedHeight > ?  AND assetName = ?" +
        "GROUP BY address " +
        "ORDER BY lockeVal " + params.order +
        " LIMIT ?,10 ";
    var option = [params.unlockedHeight, params.assetName, params.start];
    this.sql(sql, option, function (err, result) {
        if (err) {
            console.log("get address locked total for asset name err " + JSON.stringify(err));
            cb(err);
        }
        cb(null, result)
    })
};

/**
 * 返回地址的总数
 * @param params 表名和条件
 * @param cb
 */
MysqlUtils.prototype.getAddressCount = function (params, cb) {
    var sql = "SELECT count(*) as count FROM(SELECT id FROM lockedAddresses WHERE unlockedHeight > ? GROUP BY address) a";
    var option = [params.unlockedHeight];
    if (params.assetName !== "safe") {
        sql = "SELECT count(*) as count FROM(SELECT id FROM lockedAssetAddress WHERE unlockedHeight > ? AND assetName = ? GROUP BY address) a";
        option.push(params.assetName);
    }
    this.sql(sql, option, cb);
};

/**
 * 根据页数返回锁定的output
 * @param params = {
 *  pageStart
 * }
 * @param cb
 */
MysqlUtils.prototype.getTransactionLockedTotal = function (params, cb) {
    var sql = "SELECT * FROM lockedAddresses " +
        " WHERE unlockedHeight > ? " + params.order +
        " LIMIT ?,10 ";
    var option = [params.unlockedHeight, params.start];
    this.sql(sql, option, function (err, result) {
        if (err) {
            console.log("get transaction locked total err " + JSON.stringify(err));
            cb(err);
        }
        cb(null, result);
    })
};

MysqlUtils.prototype.getTransactionLockedTotalForAssetName = function (params, cb) {
    var sql = "SELECT * FROM lockedAssetAddress WHERE unlockedHeight > ?  AND assetName = ? "
        + params.order + " LIMIT ?,10 ";
    var option = [params.unlockedHeight, params.assetName, params.start];

    this.sql(sql, option, function (err, result) {
        if (err) {
            console.log("get transaction locked total err " + JSON.stringify(err));
            cb(err);
        }
        cb(null, result);
    });
};

/**
 * 返回总数
 * @param params 表名和条件
 * @param cb
 */
MysqlUtils.prototype.getTransactionCount = function (params, cb) {
    var sql = "SELECT count(*) as count FROM lockedAddresses WHERE unlockedHeight > ?";
    var option = [params.unlockedHeight];
    if (params.assetName !== "safe") {
        sql = "SELECT count(*) as count FROM lockedAssetAddress WHERE unlockedHeight > ?  AND assetName = ?";
        option.push(params.assetName);
    }

    this.sql(sql, option, cb);
};

/**
 * 获取地址锁定详情
 * @param params
 * @param cb
 * @constructor
 */
MysqlUtils.prototype.LockedDetailByAddressDB = function (params, cb) {
    var sql = "SELECT txId,lockedVal,unlockedHeight,txTime FROM " + params.tableName +
        " WHERE unlockedHeight > ? AND address = ? " + params.where +
        "ORDER BY lockedVal " + params.order +
        " LIMIT ?,10";
    var option = [params.unlockedHeight, params.address, params.start];
    this.sql(sql, option, function (err, result) {
        if (err) {
            return cb(err)
        }
        cb(null, result);
    })
};

/**
 * 获取地址锁定的总数
 * @param params
 * @param cb
 * @constructor
 */
MysqlUtils.prototype.LockedDetailByAddressCountDB = function (params, cb) {
    var sql = "SELECT count(*) as count FROM " + params.tableName +
        " WHERE unlockedHeight > ? AND address = ? " + params.where;
    var option = [params.unlockedHeight, params.address];
    this.sql(sql, option, cb);
};

/**
 * 获取资产的锁定总金额
 * @param params
 * @param cb
 */
MysqlUtils.prototype.getTotalLockedAmountForAssetName = function (params, cb) {
    var sql = "SELECT SUM(lockedVal) AS totalLocked  FROM lockedAddresses WHERE unlockedHeight > ?;";
    var option = [params.unlockedHeight];
    if (params.assetName != "safe") {
        sql = "SELECT SUM(lockedVal) AS totalLocked FROM lockedAssetAddress WHERE unlockedHeight > ? AND assetName = ? ;";
        option = [params.unlockedHeight, params.assetName];
    }
    this.sql(sql, option, cb);
};

//  get data for bitcored end ------------------------------------------------

/**
 * 获取已经同步的区块高度
 * @param cb
 */
MysqlUtils.prototype.getAsyncBlockHeight = function (cb) {
    var sql = "select * from block";
    var option = [];
    this.sql(sql, option, function (err, result) {
        if (err) {
            console.log("get async block height err : " + JSON.stringify(err));
            cb(null);
        }
        cb(null, result[0]);
    })
};

/**
 * 更新已经同步的区块高度
 * @param height
 * @param cb
 */
MysqlUtils.prototype.updateAsyncBlockHeight = function (height, cb) {
    var sql = "update block set height = ?";
    var option = [height];
    var self = this;
    self.sql(sql, option, function (err, result) {
        if (err) {
            console.log("update async block height err  : " + JSON.stringify(err))
        }
        if (result.affectedRows == 0) {
            sql = "insert into block(height) value(?)";
            self.sql(sql, option, function (err, result) {
                if (err) {
                    console.log("insert async block height err  : " + JSON.stringify(err))
                }
                cb(null, result);
            })
        } else {
            cb(null, result);
        }
    })
};

/**
 * 添加safe锁定交易
 * @param out
 *      id 唯一标识
 *      txtime 交易时间
 *      address 接收地址
 *      txId 交易id
 *      lockedVal 锁定金额
 *      lockedHeight 锁定高度
 *      unlockedHeight 解锁高度
 *      lockedValInterest 利息
 * @param cb
 */
MysqlUtils.prototype.insertToSafe = function (out, cb) {
    var sql = "insert into lockedAddresses(id,txTime,address,txId,lockedVal,lockedHeight,unlockedHeight,lockedValInterest) value(?,?,?,?,?,?,?,?)";
    var option = [out._id, out.txTime, out.address, out.txId, out.lockedVal, out.lockedHeight, out.unlockedHeight, out.lockedValInterest];
    this.sql(sql, option, function (err, result) {
        if (err) {
            console.log("insert to safe locked data err :" + JSON.stringify(err));
            if (err.code != "ER_DUP_ENTRY") {
                return cb(err);
            }
        }
        cb(null, result);
    })
};

/**
 * 添加资产锁定交易
 * @param out
 *      id 唯一标识
 *      txtime 交易时间
 *      address 接收地址
 *      txId 交易id
 *      lockedVal 锁定金额
 *      lockedHeight 锁定高度
 *      unlockedHeight 解锁高度
 *      lockedValInterest 利息
 * @param cb
 */
MysqlUtils.prototype.insertToAssets = function (out, cb) {
    var sql = "insert into lockedAssetAddress(id,txTime,address,txId,lockedVal,lockedHeight,unlockedHeight,lockedValInterest,assetName) value(?,?,?,?,?,?,?,?,?)";
    var option = [out._id, out.txTime, out.address, out.txId, out.lockedVal, out.lockedHeight, out.unlockedHeight, out.lockedValInterest, out.assetName];
    this.sql(sql, option, function (err) {
        if (err) {
            console.log("insert to asset locked date err :" + JSON.stringify(err));
            return cb(err);
        }
        cb(null)
    })
};

/**
 * 添加asset信息
 * @param asset
 * @param cb
 */
MysqlUtils.prototype.insertAssetInfo = function (asset, cb) {
    var sql = "INSERT INTO asset VALUES(?,?,?)";
    var option = [asset.assetId, asset.name, asset.shortName];
    this.sql(sql, option, function (err, result) {
        if (err) {
            if (err.code != "ER_DUP_ENTRY") {
                return cb(err);
            }
        }
        cb(null, result);
    })
};

/**
 * 根据资产ID获取资产详情
 * @param name
 * @param cb
 */
MysqlUtils.prototype.getAssetNameByAssetId = function (name, cb) {
    var sql = "SELECT * FROM asset WHERE assetId = ?";
    this.sql(sql, [name], function (err, result) {
        if (err) {
            return cb(err);
        }
        cb(null, result);
    })
};

/**
 * 根据资产简称获取资产列表
 * @param name
 * @param cb
 */
MysqlUtils.prototype.getAssetNameByShortName = function (name, cb) {
    var sql = "SELECT assetShortName as name FROM asset ";
    if (name) {
        sql += "WHERE assetShortName like '%" + name + "%'";
    }
    this.sql(sql, [], function (err, result) {
        if (err) {
            return cb(err);
        }
        cb(null, result);
    })
};

/**
 * 按时间获取锁定列表
 * @param params
 * @param cb
 */
MysqlUtils.prototype.getAddressListForDate = function (params, cb) {
    var sql = "SELECT id as chainId,txTime,address,txId,lockedVal as amount,lockedHeight,unlockedHeight,lockedValInterest from lockedAddresses where txTime > ? and txTime < ? and lockedValInterest > 0";
    // var sql="SELECT * from lockedAddresses where txTime > ? and txTime < ?";
    var option = [params.startTime, params.endTime];
    this.sql(sql, option, function (err, result) {
        if (err) {
            return cb(err);
        }
        cb(null, result);
    })
};

MysqlUtils.prototype.sql = function (sql, option, callback) {
    var self = this;
    self.connection.query(sql, option, function (err, result) {
        if (err) {
            console.log("mysql Utils  err :" + err);
            return callback(err);
        }
        callback(null, result);
    })
};

module.exports = MysqlUtils;