'use strict';
var async = require("async");
var fs = require('fs');
var Decimal = require("decimal.js");

var AnalysisAsset = require("../analysisReserve/AnalysisAsset");

var Common = require('./common');

// var assetLogos = {};

function Assets(node) {
    this.node = node;
    this.common = new Common({log: this.node.log});
    this.analysis = new AnalysisAsset();
    this.assetList = [];    //资产列表
    this.assetDetialList = {};  //资产详情
    // this.assetlogoJson = fs.readFileSync("./data/assetLogoUrl.json", "utf-8");       // 获取资产logo保存路径的文件
    this.getAllAssetList();
}

/**
 * 初始获取所有资产列表和每个资产的详情
 * 追加发布资产的列表
 */
Assets.prototype.getAllAssetList = function () {
    var self = this;
    this.node.getAssetsList(function (err, assetIds) {
        if (err) {
            console.log("init asset list err for get asset list : " + err);
        }
        async.eachSeries(assetIds, function (assetId, eachCB) {
            self.getAssetDetail(assetId, function (err, object, assetDetail) {
                if (err) {
                    return eachCB(err);
                }
                self.assetList.push(object);
                self.assetDetialList[assetId] = assetDetail;
                eachCB(null);
            });
        }, function (err) {
            if (err) {
                console.log("init asset list err for each asset ids");
            }
            self.timer();
            orderAssetList(self.assetList);
        })
    })
};

/**
 * 获取资产详情
 * 之后获取资产追加列表
 * @param assetId
 * @param callback
 */
Assets.prototype.getAssetDetail = function (assetId, callback) {
    var self = this;
    self.node.getAssetsObj(assetId, function (err, assetObj) {
        if (err) {
            return callback(err);
        }
        assetObj.assetTotalAmount = Decimal(assetObj.assetTotalAmount).mul(1);
        assetObj.alreadyIssueAmount = Decimal(assetObj.alreadyIssueAmount).mul(1);
        assetObj.destoryTotalAmout = Decimal(assetObj.destoryTotalAmout).mul(1);
        assetObj.candyTotalAmount = Decimal(assetObj.candyTotalAmount).mul(1);
        var object = {
            assetId: assetId,      //资产id
            assetName: assetObj.assetName, //名称
            shortName: assetObj.assetShortName, //简称
            issueTime: assetObj.issueTime,     //时间
            assetTotalAmount: assetObj.assetTotalAmount,   //发行总量
            alreadyIssueAmount: assetObj.alreadyIssueAmount //已发行量
        };
        callback(null, object, assetObj);
    });
};

/**
 * 冒泡排序
 * @param assetList
 */
var orderAssetList = function (assetList) {
    for (var i = 0; i < assetList.length - 1; i++) {
        for (var j = (assetList.length - 2); j >= i; j--) {
            if (assetList[j].issueTime < assetList[j + 1].issueTime) {
                var temp = assetList[j];
                assetList[j] = assetList[j + 1];
                assetList[j + 1] = temp;
            }
        }
    }
};

/**
 * 定时更新资产列表
 */
Assets.prototype.timingUpdated = function () {
    var self = this;
    var assetList = [];

    self.node.getAssetsList(function (err, assetIds) {
        if (err) {
            return;
        }

        async.eachSeries(assetIds, function (id, eachCB) {
            self.getAssetDetail(id, function (err, object, assetDetail) {
                if (err) {
                    return eachCB();
                }
                assetList.push(object);
                self.assetDetialList[id] = assetDetail;
                eachCB();
            });
        }, function () {
            self.assetList = assetList;
            orderAssetList(self.assetList);
        })
    })
};

Assets.prototype.timer = function () {
    var self = this;
    setTimeout(function () {
        self.timingUpdated();
    }, 60 * 1000 * 2);
};

var getLogoUrls = function () {
    return JSON.parse(fs.readFileSync(__dirname + "/data/assetLogoUrl.json", "utf-8"));
};

Assets.prototype.setAssetLogo = function (assetLogos, assetObj) {
    var assetName = assetObj.shortName || assetObj.assetShortName;
    if (assetLogos[assetName]) {
        assetObj.smallLogo = assetLogos[assetName][0];
        assetObj.bigLogo = assetLogos[assetName][1];
    }
    return assetObj;
};

/**
 * 获取资产发布详情
 * @param req
 * @param res
 * @return object
 */

Assets.prototype.getAssetsById = function (req, res) {
    var self = this;
    var assetId = req.params.assetsId;
    if (!self.isAssetId(assetId)) {
        return self.common.handleErrors({err: "asset not found "}, res);
    }
    var assetObj = self.assetDetialList[assetId];
    if (!assetObj) {
        var searchResult = getAssetIdForName(assetId.toLowerCase(), self.assetList);
        if (searchResult.length < 1) {
            return self.common.handleErrors({err: "asset not found "}, res);
        } else {
            searchResult = searchResult[0];
            var result = self.assetDetialList[searchResult.assetId];
            result.assetId = assetId;
            assetObj = result;
        }
    }
    var assetLogos = getLogoUrls();
    res.jsonp(this.setAssetLogo(assetLogos, assetObj));
};

/**
 * 根据名称获取资产详情 简称和名字
 * @param name
 * @param list
 * @return {Array}
 */
var getAssetIdForName = function (name, list) {
    var assets = [];
    for (var i = 0; i < list.length; i++) {
        var lowerAssetName = list[i].assetName.toLowerCase();
        var lowerShortName = list[i].shortName.toLowerCase();
        if (lowerAssetName.indexOf(name) >= 0 || lowerShortName.indexOf(name) >= 0) {
            assets.push(list[i]);
        }
    }
    return assets;
};

/**
 * 获取发布资产列表
 * @param req
 * @param res
 * @return list
 */
Assets.prototype.getAssetsList = function (req, res) {
    var self = this;
    var asset = {
        more: false,
        list: [],
        maxPage: 0
    };
    var page = req.query.pageNum;
    var name = req.query.name;
    if (name) {
        if (name.length > 20) {
            return self.common.handleErrors({err: "asset not found "}, res);
        }
        var assetsList = getAssetIdForName(name.toLowerCase(), this.assetList);
        asset.more = assetsList.length / 10 > page;
        asset.maxPage = Math.ceil(assetsList.length / 10);
        asset.list = assetsList.slice((page - 1) * 10, page * 10);
    } else {
        asset.more = this.assetList.length / 10 > page;
        asset.maxPage = Math.ceil(this.assetList.length / 10);
        asset.list = this.assetList.slice((page - 1) * 10, page * 10);
    }
    var assetLogos = getLogoUrls();
    if (asset.list.length) {
        asset.list.forEach(function (v) {
            self.setAssetLogo(assetLogos, v);
        })
    }
    res.jsonp(asset);
};

/**
 * 获取某一个资产发布和追加发布的信息
 * @param req
 * @param res
 * @return list 暂时不用
 */
// Assets.prototype.getAssetsTranasctionList = function (req, res) {
//     var self = this;
//     var assetsId = req.query.assetsId;
//     var pageNum = req.params.page;
//     self.node.getAssetsTxList(assetsId, pageNum, function (err, result) {
//         if (err) {
//             return self.common.handleErrors(err, res);
//         }
//         self.eachTxidsReturnDetail(result, pageNum, function (err, data) {
//             if (err) {
//                 return self.common.handleErrors(err, res);
//             }
//             res.jsonp(data)
//         });
//     })
// };

Assets.prototype.getAssetsTxAll = function (req, res) {
    var self = this;
    var assetsId = req.query.assetsId;
    var pageNum = req.params.page;
    self.node.getAssetsTxAllList(assetsId, pageNum, function (err, result) {
        if (err) {
            return self.common.handleErrors(err, res);
        }
        self.getOfAssetOutputInATransaction(result, pageNum, function (err, data) {
            if (err) {
                return self.common.handleErrors(err, res);
            }
            res.jsonp(data)
        });
    })
};

Assets.prototype.getOfAssetOutputInATransaction = function (option, pageNum, cb) {
    var self = this;
    var addPublishAsset = {
        more: true,
        list: [],
        maxPage: 0
    };
    async.eachSeries(option.txids, function (txid, eachTxCB) {
        self.node.getRawTransactionJson(txid, function (err, transaction) {
            if (err) {
                return eachTxCB(err);
            }
            var amount = 0;
            async.eachSeries(transaction.vout, function (out, eachOutputCB) {
                if(out.assetId){
                    amount = Decimal(amount).add(out.value).toString();
                    eachOutputCB();
                }else{
                    eachOutputCB(null);
                }
            }, function () {
                addPublishAsset.list.push({
                    issueTime: transaction.time || Math.round(new Date().getTime()) / 1000,   //发布时间
                    totalIssued: amount,    //发布金额,
                    txid: transaction.txid
                });
                eachTxCB(null);
            })
        })
    }, function (err) {
        if (err) {
            cb(err);
        }
        addPublishAsset.more = option.count > pageNum * 10;
        addPublishAsset.maxPage = Math.ceil(option.count / 10);
        cb(null, addPublishAsset);
    })
};

/**
 * 获取资产交易中最大的一个APPid 的值和地址
 * @param option
 * @param pageNum
 * @param cb
 */
Assets.prototype.eachTxidsReturnDetail = function (option, pageNum, cb) {
    var self = this;
    var addPublishAsset = {
        more: true,
        list: [],
        maxPage: 0
    };
    async.eachSeries(option.txids, function (txid, eachTxCB) {
        self.node.getRawTransactionJson(txid, function (err, transaction) {
            if (err) {
                return eachTxCB(err);
            }
            async.eachSeries(transaction.vout, function (out, eachOutputCB) {
                if (out.reserve.length > 8) {
                    var result = self.analysis.fromString(out.reserve);
                    if (result.appType < 200 || result.appType > 202) {
                        return eachOutputCB(null);
                    }
                    addPublishAsset.list.push({
                        issueTime: transaction.time || Math.round(new Date()) / 1000,   //发布时间
                        totalIssued: out.value,    //发布金额,
                        fristIssued: result.appType == 200,
                        accepAddress: out.scriptPubKey.addresses[0],
                        txid: transaction.txid
                    });
                    eachOutputCB(null);
                } else {
                    eachOutputCB(null);
                }
            }, function () {
                eachTxCB(null);
            })
        })
    }, function (err) {
        if (err) {
            cb(err);
        }
        addPublishAsset.more = option.count > pageNum * 10;
        addPublishAsset.maxPage = Math.ceil(option.count / 10);
        cb(null, addPublishAsset);
    })
};


Assets.prototype.isAssetId = function (assetId) {
    return assetId.length <= 100;

};

Assets.prototype.getAssetsObjForCache = function (assetId, callback) {
    var assetObj = this.assetDetialList[assetId];
    if (assetObj)
        return callback(null, this.assetDetialList[assetId]);
    callback({code: -624})
};

module.exports = Assets;