"use strict";

var Common = require('./common');

function LockedAddressController(node) {
    this.node = node;
    this.common = new Common({log: this.node.log});
}

/**
 * 返回锁定的地址信息
 * 根据页数
 * @param req
 * @param res
 */
LockedAddressController.prototype.addressList = function (req, res) {
    var self = this;
    var option = {
        start: req.query.page * 10 - 10,
        order: req.query.orderBy || "desc",
        assetName: req.query.assetName || "safe"
    };
    if (option.order.length > 4 || option.assetName.length > 20 || option.start < 0) {
        return self.common.handleErrors("params error!", res);
    }
    self.node.getLockedAddressList(option, function (err, result) {
        if (err) {
            return self.common.handleErrors(err, res);
        }

        result.more = result.count > option.page * 10;
        result.maxPage = Math.ceil(result.count / 10);
        self.node.getAssetLockedTotalAmount(option.assetName, function (err, totalLocked) {
            delete result.count;
            result.totalLocked = totalLocked;
            res.jsonp(result);
        })
    })
};

/**
 * 锁定交易列表
 * @param req
 * @param res
 */
LockedAddressController.prototype.transactionList = function (req, res) {
    var self = this;
    if (!req.query.order) {
        return self.common.handleErrors("参数错误！", res);
    }
    var orderBy = JSON.parse(req.query.order);
    var orderSql = "";
    if (orderBy.column == "Money") {
        orderSql = "ORDER BY lockedVal"
    } else if (orderBy.column == "Time") {
        orderSql = "ORDER BY txTime";
    } else if (orderBy.column == "Height") {
        orderSql = "ORDER BY unlockedHeight";
    } else {
        return self.common.handleErrors("params error ", res);
    }

    orderSql = orderSql + " " + orderBy.order;
    var option = {
        start: req.query.page * 10 - 10,
        order: orderSql,
        assetName: req.query.assetName
    };

    if (option.start < 0 || option.assetName > 20) {
        return self.common.handleErrors("参数错误！", res);
    }

    self.node.getLockedTransactionList(option, function (err, result) {
        if (err) {
            return self.common.handleErrors(err, res);
        }
        result.more = result.count > option.page * 10;
        result.maxPage = Math.ceil(result.count / 10);
        self.node.getAssetLockedTotalAmount(option.assetName, function (err, totalLocked) {
            delete result.count;
            result.totalLocked = totalLocked;
            res.jsonp(result);
        });
    });
};

/**
 * 锁定资产的名称列表用于切换不同资产的锁定列表
 * @param req
 * @param res
 */
LockedAddressController.prototype.getLockedAssetNameList = function (req, res) {
    var self = this;
    var assetName = req.query.assetName;
    if (assetName && assetName.length > 20) {
        return self.common.handleErrors("params error", res);
    }
    self.node.getLockedAssetNameForMysql(assetName, function (err, result) {
        if (err) {
            return self.common.handleErrors(err, res);
        }
        res.jsonp({list: result});
    })
};

/**
 * 锁定地址的详情
 * @param req
 * @param res
 */
LockedAddressController.prototype.lockedDetailByAddress = function (req, res) {
    var self = this;
    var option = {
        assetName: req.query.assetName,
        start: req.query.page * 10 - 10,
        order: req.query.orderBy,
        address: req.query.address
    };
    if (option.assetName > 20 || option.address > 34 || option.order.length > 4) {
        return self.common.handleErrors("params error", res);
    }
    this.node.lockedDetailByAddressBit(option, function (err, result) {
        if (err) {
            return self.common.handleErrors(err, res);
        }
        result.more = result.count > option.page * 10;
        result.maxPage = Math.ceil(result.count / 10);
        delete result.count;
        res.jsonp(result);
    })
};

LockedAddressController.prototype.getLockedOutputList = function (req, res) {
    var self = this;
    var now = req.query.date;

    if (!now) {
        now = new Date().toLocaleDateString();
    } else {
        now = new Date(now).toLocaleDateString();
    }
    var timestamp = Math.round(new Date(now).getTime() / 1000) - 1;
    var option = {
        startTime: timestamp,
        endTime: timestamp + (24 * 60 * 60)
    };
    this.node.getAddressList(option, function (err, result) {
        if (err) {
            return res.jsonp(err);
        }
        res.jsonp(result);
    })

};

module.exports = LockedAddressController;