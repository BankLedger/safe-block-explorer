"use strict";
var protobuf = require("protobufjs");
var assetsAppId = require("./conf/assetAppId");
var protoFilePath = __dirname + "/protoFile/app.proto";

var bitcore = require('bitcore-lib-safe');
var BufferReader = bitcore.encoding.BufferReader;

function AnalysisAsset() {

}

AnalysisAsset.prototype.fromString = function (buffer) {
    this.result = {};
    if (!buffer) {
        this.result.type = assetsAppId.normal;//dash以前的交易是没有reserve字段的，所以不存在也是正常的
        return this.result;
    }
    if (!buffer.startsWith("73616665")) {//如果十六进制字符串不是以73616665 即safe 开始的认为是不正常的
        console.log("reserve string is unnormal:" + buffer);
        this.result.type = assetsAppId.unnormal;
        return this.result;
    }
    var reserveBuf = new Buffer(buffer, "hex");
    var br = new BufferReader(reserveBuf);
    return this.formObject(br);
};

AnalysisAsset.prototype.formObject = function (br) {
    var self = this;
    var result = {};
    var type = [];
    try {
        type.coinType = br.read(4);   //读取四个字节 这四个字节是buffer

        type.versionBuf = br.readUInt16LE(); //长度不够的时候依然不会发生异常

        //AppID 除了安资之外的数据还有安聊，安投等应用需要在这里分不同的项目
        type.appIdBuf = br.read(32); //此处会发生异常,如果长度不够
        var appCmd = parseInt(br.readUInt32LE());
        result.appType = appCmd;
        var buffer = br.buf.slice(br.pos, br.buf.length + 1);
        switch (appCmd) {
            case assetsAppId.registerApp:
                self.parseRegisterApp(buffer, result);        //100 注册应用
                break;
            case assetsAppId.addAppAuthority:
                self.parseAddAppAuthority(buffer, result);         //101 添加APP权限
                break;
            case assetsAppId.deleteAppAuthority:
                self.parseAddAppAuthority(buffer, result);         //102 删除APP权限 和添加是相同格式？
                break;
            case assetsAppId.addExtendData:
                self.parseAddExtendData(buffer, result);       //103 创建外带数据
                break;
            case assetsAppId.publishAsset:
                self.parsePublishAsset(buffer, result);        //200 发行资产
                break;
            case assetsAppId.addPublishAsset:
                self.parseAddPublishAsset(buffer, result);      //201 追加发行资产
                break;
            case assetsAppId.transferAsset:
                self.parseAddPublishAsset(buffer, result);       //202 转让资产
                break;
            case assetsAppId.destoryAsset:
                self.parseAddPublishAsset(buffer, result);       //203 销毁资产
                break;
            case assetsAppId.changeAsset:
                self.parseAddPublishAsset(buffer, result);       //204 资产找零
                break;
            case assetsAppId.sendCandy:
                self.parseSendCandy(buffer, result);               //205 发放糖果
                break;
            case assetsAppId.getCandy:
                self.parseGetCandy(buffer, result);               //206 领取糖果
                break;
            case assetsAppId.transferSafe:
                self.parseTransferSafe(buffer, result);               //300 转移safe
                break;
            default:
                self.parseDefault(appCmd, result);
        }
        return result;
    } catch (err) {
        result.type = assetsAppId.parseException;
        if (err !== "RangeError: index out of range") {
            return result;
        }
        return result;
    }
};

/**
 * 注册应用 10
 * @param buffer
 * @param result
 */
AnalysisAsset.prototype.parseRegisterApp = function (buffer, result) {
    var self = this;
    var RegisterObject = self.getProtoData("App.RegisterData", buffer);

    result.version = RegisterObject.version.readUInt8();
    result.adminAddress = RegisterObject.adminAddress.toString();
    result.appName = RegisterObject.appName.toString();
    result.appDesc = RegisterObject.appDesc.toString();
    result.devType = RegisterObject.devType.readUInt8();
    result.devName = RegisterObject.devName.toString();
    result.webUrl = RegisterObject.webUrl.toString();
    result.logoUrl = RegisterObject.logoUrl.toString();
    result.coverUrl = RegisterObject.coverUrl.toString();
};

/**
 * 添加 和删除 APP权限 101 102
 * @param buffer
 * @param result
 */
AnalysisAsset.prototype.parseAddAppAuthority = function (buffer, result) {
    var self = this;
    var authData = self.getProtoData("App.AuthData", buffer);
    result.version = authData.version.readUInt16LE();
    result.setType = authData.setType.readUInt8();
    result.adminAddress = authData.adminAddress.toString();
    result.userAddress = authData.userAddress.toString();
    result.auth = authData.auth;
};

/**
 * 创建外带数据 103
 * @param buffer
 * @param result
 */
AnalysisAsset.prototype.parseAddExtendData = function (buffer, result) {
    var self = this;
    var extendData = self.getProtoData("App.ExtendData", buffer);
    result.version = extendData.version.readUInt8();
    result.extendData = extendData.extendData.toString();
};

/**
 * 追加，转让，销毁资产 201 202 203 204
 * @param buffer
 * @param result
 */
AnalysisAsset.prototype.parseAddPublishAsset = function (buffer, result) {
    var self = this;
    var publishAssetData = self.getProtoData("App.CommonData", buffer);
    result.version = publishAssetData.version.readUInt8();
    result.assetId = reverseOrder(publishAssetData.assetId);   //将反序的assetId正序
    result.amount = publishAssetData.amount.toString();
    result.remarks = publishAssetData.remarks.toString();
};

var reverseOrder = function (assetIdBuf) {
    var assetId = assetIdBuf.toString("hex");
    var CorrectedAssetId = "";
    for (var i = assetId.length / 2; i > 0; i--) {
        CorrectedAssetId += assetId.slice(i * 2 - 2, i * 2);
    }
    return CorrectedAssetId;
};

/**
 * 发布资产 200
 * @param buffer
 * @param result
 */
AnalysisAsset.prototype.parsePublishAsset = function (buffer, result) {
    var self = this;
    var issueObject = self.getProtoData("App.IssueData", buffer);
    result.version = issueObject.version.readUInt8();
    result.shortName = issueObject.shortName.toString();
    result.assetName = issueObject.assetName.toString();
    result.assetDesc = issueObject.assetDesc.toString();
    result.assetUnit = issueObject.assetUnit.toString();
    result.totalAmount = issueObject.totalAmount.toString();
    result.firstIssueAmount = issueObject.firstIssueAmount.toString();
    result.firstActualAmount = issueObject.firstActualAmount.toString();
    result.decimals = issueObject.decimals.readUInt8();
    result.destory = issueObject.destory.toString();
    result.payCandy = issueObject.payCandy.toString();
    result.candyAmount = issueObject.candyAmount.toString();
    result.candyExpired = issueObject.candyExpired.readUInt8();
    result.remarks = issueObject.remarks.toString();
};

/**
 * 发放糖果
 * @param buffer 205
 * @param result
 */
AnalysisAsset.prototype.parseSendCandy = function (buffer, result) {
    var self = this;
    var sendCandyData = self.getProtoData("App.PutCandyData", buffer);
    result.version = sendCandyData.version.readUInt8();
    result.assetId = reverseOrder(sendCandyData.assetId);
    result.amount = sendCandyData.amount.toString();
    result.expired = sendCandyData.expired.readUInt8();
    result.remarks = sendCandyData.remarks.toString();
};

/**
 * 领取糖果 206
 * @param buffer
 * @param result
 */
AnalysisAsset.prototype.parseGetCandy = function (buffer, result) {
    var self = this;
    var getCandy = self.getProtoData("App.GetCandyData", buffer);
    result.version = getCandy.version.readUInt8();
    result.assetId = reverseOrder(getCandy.assetId);
    result.amount = getCandy.amount.toString();
    result.remarks = getCandy.remarks.readUInt8();
};

AnalysisAsset.prototype.parseDefault = function (appCmd, result, callback) {
    console.log("未知官方命令");
    result.type = Transaction.type.unknowAppCmd;
    callback(null, result);
};

/**
 *  转发资产 300
 *  @param buffer
 * @param result
 */
AnalysisAsset.prototype.parseTransferSafe = function (buffer, result) {
    var self = this;
    var getCandy = self.getProtoData("App.TransferSafeData", buffer);
    result.version = getCandy.version.readUInt8();
    result.remarks = getCandy.remarks.toString();
};

/**
 * 将buffer中的值 安装proto文件中的属性解析出来
 * @param type
 * @param buffer
 */
AnalysisAsset.prototype.getProtoData = function (type, buffer) {
    var root = protobuf.loadSync(protoFilePath);
    var AwesomeMessage = root.lookupType(type);
    return AwesomeMessage.decode(buffer);
};

module.exports = AnalysisAsset;