// Source: public/src/js/app.js
var defaultLanguage = localStorage.getItem('insight-language') || 'zh_CN';
var defaultLanguageCode = localStorage.getItem('insight-languageCode') || 'Chinese';
var defaultCurrency = localStorage.getItem('insight-currency') || 'SAFE';

angular.module('insight',[
    'ngAnimate',
    'ngResource',
    'ngRoute',
    'ngProgress',
    'ui.bootstrap',
    'ui.route',
    'monospaced.qrcode',
    'gettext',
    'angularMoment',
    'insight.system',
    'insight.socket',
    'insight.blocks',
    'insight.transactions',
    'insight.address',
    'insight.search',
    'insight.status',
    'insight.connection',
    'insight.currency',
    'insight.messages',
    'insight.masternode',
    'insight.assets',
    'insight.masternodeMobile',
    'insight.ModalInstanceController'
]);

angular.module('insight.system', []);
angular.module('insight.socket', []);
angular.module('insight.blocks', []);
angular.module('insight.transactions', []);
angular.module('insight.address', []);
angular.module('insight.search', []);
angular.module('insight.status', []);
angular.module('insight.connection', []);
angular.module('insight.currency', []);
angular.module('insight.messages', []);
angular.module('insight.masternode', []);
angular.module('insight.assets', []);
angular.module('insight.masternodeMobile', []);
angular.module('insight.ModalInstanceController', []);

// Source: public/src/js/controllers/address.js
angular.module('insight.address').controller('AddressController',
  function($scope, $rootScope, $routeParams, $location, Global, Address, getSocket) {
    $scope.global = Global;

    var socket = getSocket($scope);
    var addrStr = $routeParams.addrStr;

    var _startSocket = function() {
      socket.on('bitcoind/addresstxid', function(data) {
        if (data.address === addrStr) {
          $rootScope.$broadcast('tx', data.txid);
          var base = document.querySelector('base');
          var beep = new Audio(base.href + '/sound/transaction.mp3');
          beep.play();
        }
      });
      socket.emit('subscribe', 'bitcoind/addresstxid', [addrStr]);
    };

    var _stopSocket = function () {
      socket.emit('unsubscribe', 'bitcoind/addresstxid', [addrStr]);
    };

    socket.on('connect', function() {
      _startSocket();
    });

    $scope.$on('$destroy', function(){
      _stopSocket();
    });

    $scope.params = $routeParams;

    $scope.findOne = function() {
        // var params = $routeParams.addrStr.split("&")
      $rootScope.currentAddr =  $routeParams.addrStr;
      // console.log($routeParams.addrStr)
      _startSocket();
      Address.get({
          addrStr: $routeParams.addrStr,
          assetsId : $scope.assetsId || ""
        },
        function(address) {
          $rootScope.titleDetail = address.addrStr.substring(0, 7) + '...';
          $rootScope.flashMessage = null;
          $scope.address = address;
        },
        function(e) {
          if (e.status === 400) {
            $rootScope.flashMessage = 'Invalid Address: ' + $routeParams.addrStr;
          } else if (e.status === 503) {
            $rootScope.flashMessage = 'Backend Error. ' + e.data;
          } else {
            $rootScope.flashMessage = 'Address Not Found';
          }
          $location.path('/');
        });
    };

      $scope.addressGetTxByAssetsId = function () { //根据资产id显示当前地址的资产交易
          var option = {
              address : addrStr,
              assetsId : $scope.assetsId
          }
         $scope.findOne()
      }

      $scope.$watch("assetsId",function (assetsId) {
          $scope.assetsId = assetsId
      })

  });

// Source: public/src/js/controllers/assets.js
angular.module('insight.assets').controller('AssetsController',
    function($scope, $rootScope, $routeParams, $location, Global,AssetsList,AssetsbyId,getAssetsTranasction) {

        $scope.list = function() {//默认显示所有
            var assetsPage = parseInt($routeParams.page) || 1;
            AssetsList.get({pageNum:assetsPage},function (assets) {
                $scope.assets = assets.list;
                $scope.more = assets.more;
            })
            $scope.prePage = assetsPage - 1;
            $scope.nextPage = assetsPage + 1;
        }

        $scope.findOne = function() {
            var assetsId = $routeParams.assetsId;
            AssetsbyId.get({assetsId:assetsId},function (assetsObj) {
                $scope.assets = assetsObj;
            })
        }

        $scope.getAssetsTransactionList = function (pageNum) {
            var assetsid = $scope.assets.name;
            getAssetsTranasction.get({assetsId:assetsid,page:pageNum},function (assetsTxObj) {
                $scope.assetsLsit = assetsTxObj.list;
                $scope.more = assetsTxObj.more
            })
            $scope.prePage = pageNum - 1;
            $scope.nextPage = pageNum + 1;
        }
    });
// Source: public/src/js/controllers/blocks.js
angular.module('insight.blocks').controller('BlocksController',
  function($scope, $rootScope, $routeParams, $location, Global, Block, Blocks, BlockByHeight) {
  $scope.global = Global;
  $scope.loading = false;
  if ($routeParams.blockHeight) {
    BlockByHeight.get({
      blockHeight: $routeParams.blockHeight
    }, function(hash) {
      $location.path('/block/' + hash.blockHash);
    }, function() {
      $rootScope.flashMessage = 'Bad Request';
      $location.path('/');
    });
  }

  //Datepicker
  var _formatTimestamp = function (date) {
    //UTC
    var yyyy = date.getFullYear().toString();
    var mm = (date.getMonth() + 1).toString(); // getMonth() is zero-based
    var dd  = date.getDate().toString();

    return yyyy + '-' + (mm[1] ? mm : '0' + mm[0]) + '-' + (dd[1] ? dd : '0' + dd[0]); //padding
  };

  $scope.$watch('dt', function(newValue, oldValue) {
    if (newValue !== oldValue) {
      $location.path('/blocks-date/' + _formatTimestamp(newValue));
    }
  });

  $scope.openCalendar = function($event) {
    $event.preventDefault();
    $event.stopPropagation();

    $scope.opened = true;
  };

  $scope.humanSince = function(time) {
    var m = moment.unix(time).startOf('day');
    var b = moment().startOf('day');
    return m.max().from(b);
  };

  $scope.list = function() {
    $scope.loading = true;

    if ($routeParams.blockDate) {
      $scope.detail =  $routeParams.blockDate;
    }

    if ($routeParams.startTimestamp) {
      var d=new Date($routeParams.startTimestamp*1000);
      var m=d.getMinutes();
      if (m<10) m = '0' + m;
      $scope.before = ' before ' + d.getHours() + ':' + m;
    }

    $rootScope.titleDetail = $scope.detail;

    Blocks.get({
      blockDate: $routeParams.blockDate,
      startTimestamp: $routeParams.startTimestamp
    }, function(res) {
      $scope.loading = false;
      $scope.blocks = res.blocks;
      $scope.pagination = res.pagination;
    });
  };

  $scope.findOne = function() {
    $scope.loading = true;

    Block.get({
      blockHash: $routeParams.blockHash
    }, function(block) {
      $rootScope.titleDetail = block.height;
      $rootScope.flashMessage = null;
      $scope.loading = false;
      $scope.block = block;
    }, function(e) {
      if (e.status === 400) {
        $rootScope.flashMessage = 'Invalid Transaction ID: ' + $routeParams.txId;
      }
      else if (e.status === 503) {
        $rootScope.flashMessage = 'Backend Error. ' + e.data;
      }
      else {
        $rootScope.flashMessage = 'Block Not Found';
      }
      $location.path('/');
    });
  };

  $scope.params = $routeParams;
});

// Source: public/src/js/controllers/connection.js
angular.module('insight.connection').controller('ConnectionController',
  function($scope, $window, Status, getSocket, PeerSync) {

    // Set initial values
    $scope.apiOnline = true;
    $scope.serverOnline = true;
    $scope.clienteOnline = true;

    var socket = getSocket($scope);

    // Check for the node server connection
    socket.on('connect', function() {
      $scope.serverOnline = true;
      socket.on('disconnect', function() {
        $scope.serverOnline = false;
      });
    });

    // Check for the  api connection
    $scope.getConnStatus = function() {
      PeerSync.get({},
        function(peer) {
          $scope.apiOnline = peer.connected;
          $scope.host = peer.host;
          $scope.port = peer.port;
        },
        function() {
          $scope.apiOnline = false;
        });
    };

    socket.emit('subscribe', 'sync');
    socket.on('status', function(sync) {
      $scope.sync = sync;
      $scope.apiOnline = (sync.status !== 'aborted' && sync.status !== 'error');
    });

    // Check for the client conneciton
    $window.addEventListener('offline', function() {
      $scope.$apply(function() {
        $scope.clienteOnline = false;
      });
    }, true);

    $window.addEventListener('online', function() {
      $scope.$apply(function() {
        $scope.clienteOnline = true;
      });
    }, true);

  });

// Source: public/src/js/controllers/currency.js
angular.module('insight.currency').controller('CurrencyController',
  function($scope, $rootScope, Currency) {
    $rootScope.currency.symbol = defaultCurrency;

    var _roundFloat = function(x, n) {
      if(!parseInt(n, 10) || !parseFloat(x)) n = 0;

      return Math.round(x * Math.pow(10, n)) / Math.pow(10, n);
    };

    $rootScope.currency.getConvertion = function(value) {
      value = value * 1; // Convert to number

      if (!isNaN(value) && typeof value !== 'undefined' && value !== null) {
        console.log(value);
        if (value === 0.00000000) return '0 ' + this.symbol; // fix value to show
        var response;
        if (this.symbol === 'USD') {
          response = _roundFloat((value * this.factor), 2);
        } else if (this.symbol === 'mSAFE') {
          this.factor = 1000;
          response = _roundFloat((value * this.factor), 5);
        } else if (this.symbol === 'uSAFE') {
          this.factor = 1000000;
          response = _roundFloat((value * this.factor), 2);
        } else {
          this.factor = 1;
          response = value;
        }
        // prevent sci notation
        if (response < 1e-7) response=response.toFixed(8);
        return response + ' ' + this.symbol;
      }
      return 'value error';
    };

    $scope.setCurrency = function(currency) {
      $rootScope.currency.symbol = currency;
      localStorage.setItem('insight-currency', currency);

      if (currency === 'USD') {
        Currency.get({}, function(res) {
          $rootScope.currency.factor = $rootScope.currency.bitstamp = res.data.bitstamp;
        });
      } else if (currency === 'mSAFE') {
        $rootScope.currency.factor = 1000;
      } else if (currency === 'uSAFE') {
        $rootScope.currency.factor = 1000000;
      } else {
        $rootScope.currency.factor = 1;
      }
    };

    // Get initial value
    Currency.get({}, function(res) {
      $rootScope.currency.factor = $rootScope.currency.bitstamp = res.data.bitstamp;
    });

  });

// Source: public/src/js/controllers/footer.js
angular.module('insight.system').controller('FooterController',
    function($scope, $route, $templateCache, gettextCatalog, amMoment,  Version) {
        $scope.defaultLanguage = defaultLanguage;
        $scope.Language = defaultLanguageCode;

        var _getVersion = function() {
            Version.get({},
                function(res) {
                    $scope.version = res.version;
                });
        };

        $scope.version = _getVersion();

        $scope.availableLanguages = [{
            name: 'Deutsch',
            isoCode: 'de_DE',
        }, {
            name: 'English',
            isoCode: 'en',
        }, {
            name: 'Spanish',
            isoCode: 'es',
        }, {
            name: 'Chinese',
            isoCode: 'zh_CN',
        },{
            name: 'Japanese',
            isoCode: 'ja',
        }];

        $scope.setLanguage = function(isoCode,luang) {
            gettextCatalog.currentLanguage = $scope.defaultLanguage = defaultLanguage = isoCode;
            $scope.Language = defaultLanguageCode = luang;
            amMoment.changeLocale(isoCode);
            localStorage.setItem('insight-language', isoCode);
            localStorage.setItem('insight-languageCode', luang);
            var currentPageTemplate = $route.current.templateUrl;
            $templateCache.remove(currentPageTemplate);
            $route.reload();
        };
  });

// Source: public/src/js/controllers/header.js
angular.module('insight.system').controller('HeaderController',
  function($scope, $rootScope, $modal, getSocket, Global, Block) {
    $scope.global = Global;

    $rootScope.currency = {
      factor: 1,
      bitstamp: 0,
      symbol: 'SAFE'
    };

    $scope.menu = [{
      'title': 'Blocks',
      'link': 'blocks'
    }, {
        'title': 'Masternode',
        'link': 'Masternode'
    }, {
    //     'title': 'assets',
    //     'link': 'Assets'
    // }, {
        'title': 'Status',
        'link': 'status'
    }];

    $scope.openScannerModal = function() {
      var modalInstance = $modal.open({
        templateUrl: 'scannerModal.html',
        controller: 'ScannerController'
      });
    };

    var _getBlock = function(hash) {
      Block.get({
        blockHash: hash
      }, function(res) {
        $scope.totalBlocks = res.height;
      });
    };

    var socket = getSocket($scope);
    socket.on('connect', function() {
      socket.emit('subscribe', 'inv');

      socket.on('block', function(block) {
        var blockHash = block.toString();
        _getBlock(blockHash);
      });
    });

    $rootScope.isCollapsed = true;
  });

// Source: public/src/js/controllers/index.js
var TRANSACTION_DISPLAYED = 10;
var BLOCKS_DISPLAYED = 5;

angular.module('insight.system').controller('IndexController',
  function($scope, Global, getSocket, Blocks) {
    $scope.global = Global;

    var _getBlocks = function() {
      Blocks.get({
        limit: BLOCKS_DISPLAYED
      }, function(res) {
        $scope.blocks = res.blocks;
        $scope.blocksLength = res.length;
      });
    };

    var socket = getSocket($scope);

    var _startSocket = function() { 
      socket.emit('subscribe', 'inv');
      socket.on('tx', function(tx) {
        $scope.txs.unshift(tx);
        if (parseInt($scope.txs.length, 10) >= parseInt(TRANSACTION_DISPLAYED, 10)) {
          $scope.txs = $scope.txs.splice(0, TRANSACTION_DISPLAYED);
        }
      });

      socket.on('block', function() {
        _getBlocks();
      });
    };

    socket.on('connect', function() {
      _startSocket();
    });

    $scope.humanSince = function(time) {
      var m = moment.unix(time);
      return m.max().fromNow();
    };

    $scope.index = function() {
      _getBlocks();
      _startSocket();
    };

    $scope.txs = [];
    $scope.blocks = [];
  });

// Source: public/src/js/controllers/masterNodeForMobile.js
angular.module('insight.masternodeMobile').controller('MastrtnodeMobileController',
    function($scope, $modal,amMoment,MasterNode) {
        var mobileType =  "undefined";
        var userAgent = window.navigator.userAgent;
        var db = null;
        var selfPafe = 1;

        //获取已经关注的节点保存在当前变量中
        var followNodeArray = [];
        $scope.read = function () {
            if(userAgent.indexOf("Android") != -1){
                mobileType = "Android";
            }else if(userAgent.indexOf("iPhone") != -1){
                mobileType = "iPhone";
            }else if(userAgent.indexOf("SymbianOS") != -1){
                mobileType = "SymbianOS";
            }else if(userAgent.indexOf("Windows Phone") != -1){
                mobileType = "Windows Phone";
            }else if(userAgent.indexOf("iPad") != -1){
                mobileType = "iPhone";
            }else if(userAgent.indexOf("iPod") != -1){
                mobileType = "iPhone";
            }

            var ua = navigator.userAgent.toLowerCase();//获取判断用的对象
            if (ua.match(/MicroMessenger/i) == "micromessenger") {
                //在微信中打开
                mobileType = "micromessenger";
                createDatabase(); //创建数据库实例
            }else{
                //如果不是微信登录在调用app 方法获取数据
                getMasterNodeList();
            }
            //获取所有master node
            $scope.listmobile(1);
            //默认中文
            amMoment.changeLocale("zh_CN");
            localStorage.setItem('insight-language', "zh_CN");
            localStorage.setItem('insight-languageCode', "Chinese");
        }

        var createDatabase = function () {
            db = openDatabase('mydb', '1.0', 'Test DB', 20 * 1024 * 1024,function (err) {
                console.log("创建html 新数据库");
            })
            selectAll();
        }

        function selectAll () {
            db.transaction(function (tx) {
                tx.executeSql('SELECT * FROM FollowMasterNode', [], function (tx, results) {
                    for(var i = 0;i<results.rows.length;i++){
                        followNodeArray.push(results.rows.item(i));
                    }
                }, null);
            });
        }

        function insertMasterNode(node) {
            db.transaction(function(tx){
                tx.executeSql('CREATE TABLE IF NOT EXISTS FollowMasterNode (address unique, ip,status)');
                tx.executeSql('INSERT INTO FollowMasterNode (address,ip,status) VALUES (?, ?, ?)', [node.address, node.ip,node.status]);
            })
        }

        // FollowMasterNode
        function  deleteMasterNode (address, callback) {
            db.transaction(function(tx){
                tx.executeSql("DELETE FROM FollowMasterNode WHERE address = ?",[address]);
            })
        }

        function updateMasterNode (node){
            db.transaction(function(tx){
                tx.executeSql("UPDATE FollowMasterNode SET status=? WHERE address = ?",[node.status,node.address])
            })

        }

        $scope.judgeIsFollow = function (page) {
            selfPafe = page;
            if($scope.isFollow){
                $scope.followNode(page);
            }else{
                $scope.listmobile(page);
            }
        }

        $scope.listmobile = function(page) { //默认显示所有
            page = page || 1;
            var option = {
                pageNum : page,
                params :$scope.searchParams || ""
            }
            getMasterNode(option,function (masternode) {
                $scope.masternode = masternode.list;
                $scope.rate = masternode.rate;
                $scope.more = masternode.more;
                $scope.count = masternode.listLength;
                for(var i = page -3 <= 0?1:page - 3 ;i< page+3 && i<=masternode.maxPage;i++){
                    $scope.pageBut.push({
                        num :i,
                        class: i==page?"btn-default":"btn-primary"
                    });
                }
                $scope.masternode = judgmentHasBeenConcerned(masternode.list);
                $scope.prePage =  page - 1;
                $scope.nextPage = page + 1;
                $scope.isFollow = false;
                $scope.MasterNodeListTabClass = "active";
                $scope.followNodeListTabClass = "";
            })
        }

        $scope.searchFunc = function () {   //搜索
            $scope.searchParams =  $scope.searchValue;
            var option = {
                params: $scope.searchValue,
                pageNum: 1
            }
            getMasterNode(option,function (masternode) {
                $scope.rate = masternode.rate;
                $scope.more = masternode.more;
                $scope.count = masternode.listLength;
                for(var i = 1;i < 3 && i <= masternode.maxPage; i++){
                    $scope.pageBut.push({
                        num :i,
                        class: i==1?"btn-default":"btn-primary"
                    });
                }
                $scope.masternode = judgmentHasBeenConcerned(masternode.list);
                $scope.prePage =  0;
                $scope.nextPage = 2;
            })
        }

        //获取节点信息
        var getMasterNode = function (option,callback) {
            $scope.masternode = [];
            MasterNode.get({
                pageNum :　option.pageNum || 1,
                params : option.params || ""
            },function (masternode) {
                $scope.pageBut =[];
                callback(masternode)
            })
        }

        var judgmentHasBeenConcerned = function(list){
            list.forEach(function (n, i) {
                followNodeArray.forEach(function(fn,j){
                    if(fn.address === n.address){
                        if(fn.status != n.status){
                            //如果状态被改变，则更新数据库中的数据
                            updateMasterNode(n)
                        }
                        n.beforeFollow = true;
                    }else if(!n.beforeFollow){
                        n.beforeFollow = false;
                    }
                })
            })
            return list;
        }

        $scope.$watch('search', function(searchValue) { //绑定控件元素值
            $scope.searchValue = searchValue;
        });

        $scope.addMasterNodeForMobile = function (node) {
            if(mobileType === "Android"){
               saveMasternode(JSON.stringify(node))
            }else if(mobileType === "iPhone"){
                androidAddMasterNodeFunc(node);
            }else if(mobileType === "SymbianOS"){
                androidAddMasterNodeFunc(node);
            }else if(mobileType === "Windows phone"){

            }else if(mobileType == "micromessenger"){
                insertMasterNode(node);
            }
            mobileAddMasterNodeCallback(node);
        }

        /**
         * android 添加方法
         * @param node
         * @return {*}
         */
        function saveMasternode(node) {
            return window.android.saveMasternode(node);
        }

        //添加关注节点的回调
        var mobileAddMasterNodeCallback = function (node) {
            followNodeArray.push(node);
            $scope.masternode = judgmentHasBeenConcerned($scope.masternode);
        }
        //删除关注节点
        $scope.removeMasterNodeForMobile = function (node) {
            var result  = 0;
            if(mobileType === "Android"){
                result = window.android.deleteMasternode(JSON.stringify(node));
            }else if(mobileType === "iPhone"){
                // androidRemoveMasterNodeFunc(node);
            }else if(mobileType === "SymbianOS"){
                // androidRemoveMasterNodeFunc(node);
            }else if(mobileType === "Windows phone"){
                // androidRemoveMasterNodeFunc(node);
            }else if(mobileType == "micromessenger"){
                deleteMasterNode(node.address);
                result = 1;
            }
            if(result == 1){
                androidRemoveMasterNodeFunc(node);
                $scope.followNode(selfPafe);
            }
        }

        //android 删除关注节点
        var androidRemoveMasterNodeFunc = function (node) {
            followNodeArray.forEach(function (n, i) {
                if(n.address === node.address){
                    followNodeArray.remove(i);
                    $scope.masternode = followNodeArray;
                    return;
                }
            });
        }

        //删除关注节点回调方法
        var mobileRemoveMasterNodeCallback = function (node,status) {

        }

        function getMasterNodeList(){
            if(mobileType === "Android"){
                followNodeArray = JSON.parse(getMasternode());
            }else if(mobileType === "iPhone"){
                // androidRemoveMasterNodeFunc(node);
            }else if(mobileType === "SymbianOS"){
                // androidRemoveMasterNodeFunc(node);
            }else if(mobileType === "Windows phone"){
                // androidRemoveMasterNodeFunc(node);
            }
            $scope.masternode = judgmentHasBeenConcerned(followNodeArray);
        }
        function getMasternode() {
            return  window.android.getMasternode();
        }

        $scope.followNode = function (page) {
            $scope.masternode =[];
            for (var i = (page-1) * 10;i< page * 10;i++ ){
                if(followNodeArray[i]){
                    $scope.masternode.push(followNodeArray[i]);
                }
            }
            $scope.more = followNodeArray.length / 10 > page;
            $scope.prePage =  page - 1;
            $scope.nextPage = page + 1;
            $scope.isFollow = true;
            var maxPage  = Math.ceil( followNodeArray.length/10);
            $scope.pageBut =[];
            for(var i = page -3 <= 0?1:page - 3 ;i< page+3 && i<=maxPage;i++){
                $scope.pageBut.push({
                    num :i,
                    class: i==page?"btn-default":"btn-primary"
                });
            }
            $scope.MasterNodeListTabClass = "";
            $scope.followNodeListTabClass = "active";
        }


//         $scope.open = function(node) {
//             var modalInstance = $modal.open({
//                 templateUrl : './views/includes/myModalContent.html',
//                 controller : 'ModalInstanceController',
//                 resolve : {
//                     items : function() {
//                         return node
//                     }
//                 }
//             });
//             modalInstance.opened.then(function() {// 模态窗口打开之后执行的函数
//                 console.log('modal is opened');
//             });
//             modalInstance.result.then(function(result) {
//             }, function(reason) {
//                 console.log(reason);// 点击空白区域，总会输出backdrop
//                 // click，点击取消，则会暑促cancel
//                 console.info('Modal dismissed at: ' + new Date());
//             });
//         };
// }).controller('ModalInstanceController', function($scope, $modalInstance, items) {
//     console.log("join ModalInstanceController");
//     console.log($modalInstance);
//     $scope.selected = items;
//     $scope.ok = function() {
//         console.log("--------------------------------");
//         $modalInstance.close($scope.selected);
//     };
//     $scope.cancel = function() {
//         console.log("=============================");
//         $modalInstance.dismiss('cancel');
//     };
});

// Source: public/src/js/controllers/masternode.js
angular.module('insight.masternode').controller('MastrtnodeController',
    function($scope, $rootScope, $routeParams, $location, Global,MasterNode) {
        var timerPage = 1;
        // 检测平台的方法
        var isMobile = true;
        $scope.judgeNotMobile = function () {   //如果mobile打开，不会执行此方法
            var system = {
                win: false,
                mac: false,
                xll: false,
            };
            //检测平台
            var p = navigator.platform;
            system.win = p.indexOf("Win") == 0;
            system.mac = p.indexOf("Mac") == 0;
            system.x11 = (p == "X11") || (p.indexOf("Linux") == 0);
            if(!system.win && !system.mac && !system.xll){  //如果不是pc端
                $location.path("masterNodeMobile/");
            }
            isMobile = false;
            $scope.list(1);
        }

        $scope.list = function(page) { //默认显示所有
            if(page == "..."){
                return;
            }
            page = page || 1;

            timerPage = page;
            var maxPage  = 0;
            var startPage = page -3<0?1:page-3;
            var option = {
                pageNum : page,
                params : $scope.searchParams || ""
            }
            getMasterNode(option)
        }

        var getMasterNode = function (option,callback) {
            var page = option.pageNum;
            MasterNode.get({
                pageNum :　option.pageNum,
                params : option.params
            },function (masternode) {
                $scope.pageBut = [];
                $scope.masternode = masternode.list;
                $scope.rate = masternode.rate;
                $scope.more = masternode.more;
                $scope.count = masternode.listLength;
                if(isMobile){
                    if(page != 1) {
                        $scope.pageBut.push({
                            num: page - 3 <= 0 ? 1 : page - 3,
                            class: "btn-primary"
                        })
                    }
                    $scope.pageBut.push({
                        num : "...",
                        class: ""
                    })
                    if(page != masternode.maxPage) {
                        $scope.pageBut.push({
                            num: page + 3 >= masternode.maxPage ? masternode.maxPage : page + 3,
                            class: "btn-primary"
                        })
                    }
                }else{
                    for(var i = page -3 <= 0?1:page - 3 ;i< page+3 && i<=masternode.maxPage;i++){
                        $scope.pageBut.push({
                            num :i,
                            class: i==page?"btn-default":"btn-primary"
                        });
                    }
                }
                $scope.prePage =  page - 1;
                $scope.nextPage = page + 1;
            })
        }

        $scope.searchFunc = function () {   //搜索
            timerPage = 1;
            $scope.searchParams =  $scope.searchValue;
            var option = {
                params: $scope.searchValue,
                pageNum: 1
            }
            getMasterNode(option)
        }

        $scope.$watch('search', function(searchValue) { //绑定控件元素值
            $scope.searchValue = searchValue;
        });

        setInterval(function(){
            var option = {
                pageNum : timerPage,
                params :$scope.searchParams || ""
            }
            getMasterNode(option)
        },60*1000)
    });
// Source: public/src/js/controllers/messages.js
angular.module('insight.messages').controller('VerifyMessageController',
  function($scope, $http) {
  $scope.message = {
    address: '',
    signature: '',
    message: ''
  };
  $scope.verification = {
    status: 'unverified',  // ready|loading|verified|error
    result: null,
    error: null,
    address: ''
  };

  $scope.verifiable = function() {
    return ($scope.message.address
            && $scope.message.signature
            && $scope.message.message);
  };
  $scope.verify = function() {
    $scope.verification.status = 'loading';
    $scope.verification.address = $scope.message.address;
    $http.post(window.apiPrefix + '/messages/verify', $scope.message)
      .success(function(data, status, headers, config) {
        if(typeof(data.result) != 'boolean') {
          // API returned 200 but result was not true or false
          $scope.verification.status = 'error';
          $scope.verification.error = null;
          return;
        }

        $scope.verification.status = 'verified';
        $scope.verification.result = data.result;
      })
      .error(function(data, status, headers, config) {
        $scope.verification.status = 'error';
        $scope.verification.error = data;
      });
  };

  // Hide the verify status message on form change
  var unverify = function() {
    $scope.verification.status = 'unverified';
  };
  $scope.$watch('message.address', unverify);
  $scope.$watch('message.signature', unverify);
  $scope.$watch('message.message', unverify);
});

// Source: public/src/js/controllers/scanner.js
angular.module('insight.system').controller('ScannerController',
  function($scope, $rootScope, $modalInstance, Global) {
    $scope.global = Global;

    // Detect mobile devices
    var isMobile = {
      Android: function() {
          return navigator.userAgent.match(/Android/i);
      },
      BlackBerry: function() {
          return navigator.userAgent.match(/BlackBerry/i);
      },
      iOS: function() {
          return navigator.userAgent.match(/iPhone|iPad|iPod/i);
      },
      Opera: function() {
          return navigator.userAgent.match(/Opera Mini/i);
      },
      Windows: function() {
          return navigator.userAgent.match(/IEMobile/i);
      },
      any: function() {
          return (isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows());
      }
    };

    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
    window.URL = window.URL || window.webkitURL || window.mozURL || window.msURL;

    $scope.isMobile = isMobile.any();
    $scope.scannerLoading = false;

    var $searchInput = angular.element(document.getElementById('search')),
        cameraInput,
        video,
        canvas,
        $video,
        context,
        localMediaStream;

    var _scan = function(evt) {
      if ($scope.isMobile) {
        $scope.scannerLoading = true;
        var files = evt.target.files;

        if (files.length === 1 && files[0].type.indexOf('image/') === 0) {
          var file = files[0];

          var reader = new FileReader();
          reader.onload = (function(theFile) {
            return function(e) {
              var mpImg = new MegaPixImage(file);
              mpImg.render(canvas, { maxWidth: 200, maxHeight: 200, orientation: 6 });

              setTimeout(function() {
                qrcode.width = canvas.width;
                qrcode.height = canvas.height;
                qrcode.imagedata = context.getImageData(0, 0, qrcode.width, qrcode.height);

                try {
                  //alert(JSON.stringify(qrcode.process(context)));
                  qrcode.decode();
                } catch (e) {
                  alert(e);
                }
              }, 1500);
            };
          })(file);

          // Read  in the file as a data URL
          reader.readAsDataURL(file);
        }
      } else {
        if (localMediaStream) {
          context.drawImage(video, 0, 0, 300, 225);

          try {
            qrcode.decode();
          } catch(e) {
            //qrcodeError(e);
          }
        }

        setTimeout(_scan, 500);
      }
    };

    var _successCallback = function(stream) {
      video.src = (window.URL && window.URL.createObjectURL(stream)) || stream;
      localMediaStream = stream;
      video.play();
      setTimeout(_scan, 1000);
    };

    var _scanStop = function() {
      $scope.scannerLoading = false;
      $modalInstance.close();
      if (!$scope.isMobile) {
        if (localMediaStream.stop) localMediaStream.stop();
        localMediaStream = null;
        video.src = '';
      }
    };

    var _videoError = function(err) {
      console.log('Video Error: ' + JSON.stringify(err));
      _scanStop();
    };

    qrcode.callback = function(data) {
      _scanStop();

      var str = (data.indexOf('safe:') === 0) ? data.substring(8) : data;
      console.log('QR code detected: ' + str);
      $searchInput
        .val(str)
        .triggerHandler('change')
        .triggerHandler('submit');
    };

    $scope.cancel = function() {
      _scanStop();
    };

    $modalInstance.opened.then(function() {
      $rootScope.isCollapsed = true;
      
      // Start the scanner
      setTimeout(function() {
        canvas = document.getElementById('qr-canvas');
        context = canvas.getContext('2d');

        if ($scope.isMobile) {
          cameraInput = document.getElementById('qrcode-camera');
          cameraInput.addEventListener('change', _scan, false);
        } else {
          video = document.getElementById('qrcode-scanner-video');
          $video = angular.element(video);
          canvas.width = 300;
          canvas.height = 225;
          context.clearRect(0, 0, 300, 225);

          navigator.getUserMedia({video: true}, _successCallback, _videoError); 
        }
      }, 500);
    });
});

// Source: public/src/js/controllers/search.js
angular.module('insight.search').controller('SearchController',
  function($scope, $routeParams, $location, $timeout, Global, Block, Transaction, Address, BlockByHeight,AssetsbyId) {
  $scope.global = Global;
  $scope.loading = false;

  var _badQuery = function() {
    $scope.badQuery = true;

    $timeout(function() {
      $scope.badQuery = false;
    }, 2000);
  };

  var _resetSearch = function() {
    $scope.q = '';
    $scope.loading = false;
  };

  $scope.search = function() {
    var q = $scope.q;
    $scope.badQuery = false;
    $scope.loading = true;
      getBlockByHash(q)
  }

  var getBlockByHash = function (q) {
      Block.get({
          blockHash: q
      }, function() {
          _resetSearch();
          $location.path('block/' + q);
      }, function() { //block not found, search on TX
          getTransaction(q);
      });
  };
  
  var getTransaction = function (q) {
      Transaction.get({
          txId: q
      }, function() {
          _resetSearch();
          $location.path('tx/' + q);
      }, function() { //tx not found, search on Address
          getAddress(q);
      });
  }
  
  var getAddress = function (q) {
      Address.get({
          addrStr: q
      }, function() {
          _resetSearch();
          $location.path('address/' + q);
      }, function() {// address not found
          getBlockByheight(q);
      });
  }

  var getBlockByheight = function (q) {
      BlockByHeight.get({
          blockHeight: q
      }, function(hash) {
          _resetSearch();
          $location.path('/block/' + hash.blockHash);
      }, function() { // block by height not found
          getAssetsById(q);
      });
  }
  
  var getAssetsById = function (q) {
      AssetsbyId.get({
          assetsId:q
      },function (assets) {
          _resetSearch();
          $location.path('/AssetsDetail/' + assets.name);
      },function () {// assets not found
          if (isFinite(q)) { // ensure that q is a finite number. A logical height value.
              $scope.loading = false;
              _badQuery();
          }else {
              $scope.loading = false;
              _badQuery();
          }
      })
  }

});
// Source: public/src/js/controllers/status.js
angular.module('insight.status').controller('StatusController',
  function($scope, $routeParams, $location, Global, Status, Sync, getSocket) {
    $scope.global = Global;

    $scope.getStatus = function(q) {
      Status.get({
          q: 'get' + q
        },
        function(d) {
          $scope.loaded = 1;
          angular.extend($scope, d);
        },
        function(e) {
          $scope.error = 'API ERROR: ' + e.data;
        });
    };

    $scope.humanSince = function(time) {
      var m = moment.unix(time / 1000);
      return m.max().fromNow();
    };

    var _onSyncUpdate = function(sync) {
      $scope.sync = sync;
    };

    var _startSocket = function () {
      socket.emit('subscribe', 'sync');
      socket.on('status', function(sync) {
        _onSyncUpdate(sync);
      });
    };
    
    var socket = getSocket($scope);
    socket.on('connect', function() {
      _startSocket();
    });

    $scope.getSync = function() {
      _startSocket();
      Sync.get({},
        function(sync) {
          _onSyncUpdate(sync);
        },
        function(e) {
          var err = 'Could not get sync information' + e.toString();
          $scope.sync = {
            error: err
          };
        });
    };
  });

// Source: public/src/js/controllers/transactions.js
angular.module('insight.transactions').controller('transactionsController',
    function($scope, $rootScope, $routeParams, $location, Global, Transaction, TransactionsByBlock, TransactionsByAddress) {
        $scope.global = Global;
        $scope.loading = false;
        $scope.loadedBy = null;
        var unlockHeight = 0;
        var pageNum = 0;
        var pagesTotal = 1;
        var COIN = 100000000;

        var _aggregateItems = function(items) {
            if (!items) return [];
            var l = items.length;

            var ret = [];
            var tmp = {};
            var u = 0;

            for(var i=0; i < l; i++) {

                var notAddr = false;
                // non standard input
                if (items[i].scriptSig && !items[i].addr) {
                    // items[i].addr = 'Unparsed address [' + u++ + ']';
                    // items[i].notAddr = true;
                    notAddr = true;
                }

                if (items[i].scriptSig) {
                    var asmArray = items[i].scriptSig.asm.split(' ');
                    items[i].Confirmations = asmArray[0];
                    items[i].scriptSig = asmArray[1] || " ";
                }

                // non standard output
                if (items[i].scriptPubKey && !items[i].scriptPubKey.addresses) {
                    items[i].scriptPubKey.addresses = ['Unparsed address [' + u++ + ']'];
                    items[i].notAddr = true;
                    notAddr = true;
                }

                if (items[i].scriptPubKey && items[i].scriptPubKey.addresses.length > 1) {
                    items[i].addr = items[i].scriptPubKey.addresses.join(',');
                    ret.push(items[i]);
                    continue;
                }

                var addr = items[i].addr || (items[i].scriptPubKey && items[i].scriptPubKey.addresses[0]);

                if (!tmp[addr]) {
                    tmp[addr] = {};
                    tmp[addr].valueSat = 0;
                    tmp[addr].count = 0;
                    tmp[addr].addr = addr;
                    tmp[addr].items = [];
                }
                tmp[addr].isSpent = items[i].spentTxId;

                tmp[addr].doubleSpentTxID = tmp[addr].doubleSpentTxID   || items[i].doubleSpentTxID;
                tmp[addr].doubleSpentIndex = tmp[addr].doubleSpentIndex || items[i].doubleSpentIndex;
                tmp[addr].dbError = tmp[addr].dbError || items[i].dbError;
                tmp[addr].valueSat += Math.round(items[i].value * COIN);
                tmp[addr].items.push(items[i]);
                tmp[addr].notAddr = notAddr;
                if(items[i].unlockHeight >0){
                    tmp[addr].unlockHeight = items[i].unlockHeight;
                    if(items[i].unlockHeight > unlockHeight){
                        tmp[addr].isLocked = true;
                    }else{
                        tmp[addr].isLocked = false;
                    }
                }
                tmp[addr].assetsId = " SAFE";       //给新组装的数据加入资产类型 PS：判断或者由API传回来
                items[i].assetsId = " SAFE";        //给每个原始数据上面加入资产类型
                if (items[i].unconfirmedInput)
                    tmp[addr].unconfirmedInput = true;
                tmp[addr].count++;
            }

            angular.forEach(tmp, function(v) {
                v.value    = v.value || parseFloat(v.valueSat) / COIN;
                if(v.value < 0.000001){
                    var d = v.value.toString()
                    var num = parseInt(d.substr(d.indexOf('-')+1));
                    var num1 = d.substr(0,1);
                    var str = "0.";
                    for(var i =0;i < num; i++){
                        str+="0"
                    }
                    str+=num1.toString();
                    v.value = str;
                }
                ret.push(v);
            });
            return ret;
        };

        var _processTX = function(tx) {
            unlockHeight = tx.confirmations +tx.blockheight;
            tx.vinSimple = _aggregateItems(tx.vin);
            tx.voutSimple = _aggregateItems(tx.vout);
        };

        var _paginate = function(data) {
            $scope.loading=false;
            if(!$scope.block){
                $scope.block={};
            }
            $scope.block.newReward=0;
            pagesTotal=data.pagesTotal;
            pageNum+=1;
            var allReward=0;
            var txAllOutputValue=0;
            data.txs.forEach(function(tx){
                if(typeof tx.txid != "undefined" ){
                    _processTX(tx);
                    // if(typeof tx.fees != "undefined" ) {
                    //     allReward += parseFloat(parseFloat(tx.fees).toFixed(8));
                    // }else{
                    //     allReward += 0;
                    // }
                    // for(var oIndex=0;oIndex<tx.vout.length;oIndex++){
                    //     txAllOutputValue += parseFloat(tx.vout[oIndex].value);
                    // }
                    tx.assetsId = " AKB";
                    $scope.txs.push(tx);
                }
            })
            // if($scope.block.height<=5000 && $scope.block.height>=1){
            //     $scope.block.newReward=txAllOutputValue;
            // }else{
            //     $scope.block.newReward=allReward;
            // }
            // $scope.block.newReward = parseFloat($scope.block.newReward).toFixed(8);
        };

        var _byBlock = function() {
            TransactionsByBlock.get({
                block: $scope.block.hash,
                pageNum: pageNum
            }, function(data) {
                _paginate(data);
            });
        };

        var _byAddress = function () {
            TransactionsByAddress.get({
                address: $routeParams.addrStr,
                pageNum: pageNum
            }, function(data) {
                _paginate(data);
            });
        };

        var _findTx = function(txid) {
            Transaction.get({
                txId: txid
            }, function(tx) {
                $rootScope.titleDetail = tx.txid.substring(0,7) + '...';
                $rootScope.flashMessage = null;
                $scope.tx = tx;
                _processTX(tx);
                tx.assetsId = " SAFE";
                $scope.txs.unshift(tx);
            }, function(e) {
                if (e.status === 400) {
                    $rootScope.flashMessage = 'Invalid Transaction ID: ' + $routeParams.txId;
                }
                else if (e.status === 503) {
                    $rootScope.flashMessage = 'Backend Error. ' + e.data;
                }
                else {
                    $rootScope.flashMessage = 'Transaction Not Found';
                }

                $location.path('/');
            });
        };

        $scope.findThis = function() {
            _findTx($routeParams.txId);
        };

        // Initial load
        $scope.load = function(from) {
            $scope.loadedBy = from;
            $scope.loadMore();
        };

        // Load more transactions for pagination
        $scope.loadMore = function() {
            if (pageNum < pagesTotal && !$scope.loading) {
                $scope.loading = true;
                if ($scope.loadedBy === 'address') {
                    _byAddress();
                }else {
                    _byBlock();
                }
            }
        };

        // Highlighted txout
        if ($routeParams.v_type == '>' || $routeParams.v_type == '<') {
            $scope.from_vin = $routeParams.v_type == '<' ? true : false;
            $scope.from_vout = $routeParams.v_type == '>' ? true : false;
            $scope.v_index = parseInt($routeParams.v_index);
            $scope.itemsExpanded = true;
        }

        // Init without txs
        $scope.txs = [];

        $scope.$on('tx', function(event, txid) {
            _findTx(txid);
        });

    });

angular.module('insight.transactions').controller('SendRawTransactionController',
    function($scope, $http) {
        $scope.transaction = '';
        $scope.status = 'ready';  // ready|loading|sent|error
        $scope.txid = '';
        $scope.error = null;

        $scope.formValid = function() {
            return !!$scope.transaction;
        };
        $scope.send = function() {
            var postData = {
                rawtx: $scope.transaction
            };
            $scope.status = 'loading';
            $http.post(window.apiPrefix + '/tx/send', postData)
                .success(function(data, status, headers, config) {
                    if(typeof(data.txid) != 'string') {
                        // API returned 200 but the format is not known
                        $scope.status = 'error';
                        $scope.error = 'The transaction was sent but no transaction id was got back';
                        return;
                    }

                    $scope.status = 'sent';
                    $scope.txid = data.txid;
                })
                .error(function(data, status, headers, config) {
                    $scope.status = 'error';
                    if(data) {
                        $scope.error = data;
                    } else {
                        $scope.error = "No error message given (connection error?)"
                    }
                });
        };
    });

// Source: public/src/js/services/address.js
angular.module('insight.address').factory('Address',
  function($resource) {
  return $resource(window.apiPrefix + '/addr/:addrStr/?noTxList=1', {
      addrStr: '@addStr',
      assetsId :'@assetsId'

  }, {
    get: {
      method: 'GET',
      interceptor: {
        response: function (res) {
          return res.data;
        },
        responseError: function (res) {
          if (res.status === 404) {
            return res;
          }
        }
      }
    }
  });
});

 
// Source: public/src/js/services/assets.js
angular.module('insight.assets')
    .factory('AssetsbyId',
        function($resource) {
            return $resource(window.apiPrefix + '/assets/:assetsId', {
                assetsId: '@assetsId'
            }, {
                get: {
                    method: 'GET',
                    interceptor: {
                        response: function (res) {
                            return res.data;
                        },
                        responseError: function (res) {
                            if (res.status === 404) {
                                return res;
                            }
                        }
                    }
                }
            })
        }).factory("AssetsList",
        function ($resource) {
            return $resource(window.apiPrefix + '/assetsList', {

            })
        }).factory("getAssetsTranasction",
        function ($resource) {
            return $resource(window.apiPrefix + '/getAssetsTranasction/:page', {
            })
        })

// Source: public/src/js/services/blocks.js
angular.module('insight.blocks')
  .factory('Block',
    function($resource) {
    return $resource(window.apiPrefix + '/block/:blockHash', {
      blockHash: '@blockHash'
    }, {
      get: {
        method: 'GET',
        interceptor: {
          response: function (res) {
            return res.data;
          },
          responseError: function (res) {
            if (res.status === 404) {
              return res;
            }
          }
        }
      }
    });
  })
  .factory('Blocks',
    function($resource) {
      return $resource(window.apiPrefix + '/blocks');
  })
  .factory('BlockByHeight',
    function($resource) {
      return $resource(window.apiPrefix + '/block-index/:blockHeight');
  });

// Source: public/src/js/services/currency.js
angular.module('insight.currency').factory('Currency',
  function($resource) {
    return $resource(window.apiPrefix + '/currency');
});

// Source: public/src/js/services/global.js
//Global service for global variables
angular.module('insight.system')
  .factory('Global',[
    function() {
    }
  ])
  .factory('Version',
    function($resource) {
      return $resource(window.apiPrefix + '/version');
  });

// Source: public/src/js/services/masternode.js
angular.module('insight.masternode')
    .factory('MasterNode',
        function($resource) {
            return $resource(window.apiPrefix + '/masternode', {
                pageNum: '@pageNum',
                params :'@params'
            }, {
                get: {
                    method: 'GET',
                    interceptor: {
                        response: function (res) {
                            return res.data;
                        },
                        responseError: function (res) {
                            if (res.status === 404) {
                                return res;
                            }
                        }
                    }
                }
            });
        });


// Source: public/src/js/services/socket.js
var ScopedSocket = function(socket, $rootScope) {
  this.socket = socket;
  this.$rootScope = $rootScope;
  this.listeners = [];
};

ScopedSocket.prototype.removeAllListeners = function(opts) {
  if (!opts) opts = {};
  for (var i = 0; i < this.listeners.length; i++) {
    var details = this.listeners[i];
    if (opts.skipConnect && details.event === 'connect') {
      continue;
    }
    this.socket.removeListener(details.event, details.fn);
  }
  this.listeners = [];
};

ScopedSocket.prototype.on = function(event, callback) {
  var socket = this.socket;
  var $rootScope = this.$rootScope;

  var wrapped_callback = function() {
    var args = arguments;
    $rootScope.$apply(function() {
      callback.apply(socket, args);
    });
  };
  socket.on(event, wrapped_callback);

  this.listeners.push({
    event: event,
    fn: wrapped_callback
  });
};

ScopedSocket.prototype.emit = function(event, data, callback) {
  var socket = this.socket;
  var $rootScope = this.$rootScope;
  var args = Array.prototype.slice.call(arguments);

  args.push(function() {
    var args = arguments;
    $rootScope.$apply(function() {
      if (callback) {
        callback.apply(socket, args);
      }
    });
  });

  socket.emit.apply(socket, args);
};

angular.module('insight.socket').factory('getSocket',
  function($rootScope) {
    var socket = io.connect(null, {
      'reconnect': true,
      'reconnection delay': 500,
    });
    return function(scope) {
      var scopedSocket = new ScopedSocket(socket, $rootScope);
      scope.$on('$destroy', function() {
        scopedSocket.removeAllListeners();
      });
      socket.on('connect', function() {
        scopedSocket.removeAllListeners({
          skipConnect: true
        });
      });
      return scopedSocket;
    };
  });

// Source: public/src/js/services/status.js
angular.module('insight.status')
  .factory('Status',
    function($resource) {
      return $resource(window.apiPrefix + '/status', {
        q: '@q'
      });
    })
  .factory('Sync',
    function($resource) {
      return $resource(window.apiPrefix + '/sync');
    })
  .factory('PeerSync',
    function($resource) {
      return $resource(window.apiPrefix + '/peer');
    });

// Source: public/src/js/services/transactions.js
angular.module('insight.transactions')
  .factory('Transaction',
    function($resource) {
    return $resource(window.apiPrefix + '/tx/:txId', {
      txId: '@txId'
    }, {
      get: {
        method: 'GET',
        interceptor: {
          response: function (res) {
            return res.data;
          },
          responseError: function (res) {
            if (res.status === 404) {
              return res;
            }
          }
        }
      }
    });
  })
  .factory('TransactionsByBlock',
    function($resource) {
    return $resource(window.apiPrefix + '/txs', {
      block: '@block'
    });
  })
  .factory('TransactionsByAddress',
    function($resource) {
    return $resource(window.apiPrefix + '/txs', {
      address: '@address'
    });
  })
  .factory('Transactions',
    function($resource) {
      return $resource(window.apiPrefix + '/txs');
  });

// Source: public/src/js/directives.js
var ZeroClipboard = window.ZeroClipboard;

angular.module('insight')
  .directive('scroll', function ($window) {
    return function(scope, element, attrs) {
      angular.element($window).bind('scroll', function() {
        if (this.pageYOffset >= 200) {
          scope.secondaryNavbar = true;
        } else {
          scope.secondaryNavbar = false;
        }
        scope.$apply();
      });
    };
  })
  .directive('whenScrolled', function($window) {
    return {
      restric: 'A',
      link: function(scope, elm, attr) {
        var pageHeight, clientHeight, scrollPos;
        $window = angular.element($window);

        var handler = function() {
          pageHeight = window.document.documentElement.scrollHeight;
          clientHeight = window.document.documentElement.clientHeight;
          scrollPos = window.pageYOffset;

          if (pageHeight - (scrollPos + clientHeight) === 0) {
            scope.$apply(attr.whenScrolled);
          }
        };

        $window.on('scroll', handler);

        scope.$on('$destroy', function() {
          return $window.off('scroll', handler);
        });
      }
    };
  })
  .directive('clipCopy', function() {
    ZeroClipboard.config({
      moviePath: '/lib/zeroclipboard/ZeroClipboard.swf',
      trustedDomains: ['*'],
      allowScriptAccess: 'always',
      forceHandCursor: true
    });

    return {
      restric: 'A',
      scope: { clipCopy: '=clipCopy' },
      template: '<div class="tooltip fade right in"><div class="tooltip-arrow"></div><div class="tooltip-inner">Copied!</div></div>',
      link: function(scope, elm) {
        var clip = new ZeroClipboard(elm);

        clip.on('load', function(client) {
          var onMousedown = function(client) {
            client.setText(scope.clipCopy);
          };

          client.on('mousedown', onMousedown);

          scope.$on('$destroy', function() {
            client.off('mousedown', onMousedown);
          });
        });

        clip.on('noFlash wrongflash', function() {
          return elm.remove();
        });
      }
    };
  })
  .directive('focus', function ($timeout) {
    return {
      scope: {
        trigger: '@focus'
      },
      link: function (scope, element) {
        scope.$watch('trigger', function (value) {
          if (value === "true") {
            $timeout(function () {
              element[0].focus();
            });
          }
        });
      }
    };
  });

// Source: public/src/js/filters.js
angular.module('insight')
  .filter('startFrom', function() {
    return function(input, start) {
      start = +start; //parse to int
      return input.slice(start);
    }
  })
  .filter('split', function() {
    return function(input, delimiter) {
      var delimiter = delimiter || ',';
      return input.split(delimiter);
    }
  });

// Source: public/src/js/config.js
//Setting up route
angular.module('insight').config(function($routeProvider) {
  $routeProvider.
    when('/block/:blockHash', {
      templateUrl: 'views/block.html',
      title: 'Safe Block '
    }).
    when('/block-index/:blockHeight', {
      controller: 'BlocksController',
      templateUrl: 'views/redirect.html'
    }).
    when('/tx/send', {
      templateUrl: 'views/transaction_sendraw.html',
      title: 'Broadcast Raw Transaction'
    }).
    when('/tx/:txId/:v_type?/:v_index?', {
      templateUrl: 'views/transaction.html',
      title: 'Safe Transaction '
    }).
    when('/', {
      templateUrl: 'views/index.html',
      title: 'Home'
    }).
    when('/blocks', {
      templateUrl: 'views/block_list.html',
      title: 'Safe Blocks solved Today'
    }).
    when('/blocks-date/:blockDate/:startTimestamp?', {
      templateUrl: 'views/block_list.html',
      title: 'Safe Blocks solved '
    }).
      when('/address/:addrStr', {
      templateUrl: 'views/address.html',
      title: 'Safe Address '
    }).
    when('/status', {
      templateUrl: 'views/status.html',
      title: 'Status'
    }).
    when('/messages/verify', {
      templateUrl: 'views/messages_verify.html',
      title: 'Verify Message'
    }).
  when('/Masternode', {
      templateUrl: 'views/masternode.html',
      title: 'Masternode'
  }).
  when('/masterNodeMobile', {
      templateUrl: 'views/masterNodeMobile.html',
      title: 'masterNodeMobile'
  }).
  when('/masterNodeApp', {
      templateUrl: 'views/masterNodeApp.html',
      title: 'masterNodeApp'
  }).
  when('/Masternode/:page', {
      templateUrl: 'views/masternode.html',
      title: 'Masternode'
  }).
  when('/Assets', {
      templateUrl: 'views/assets.html',
      title: 'Assets'
  }).
  when('/Assets/:page', {
      templateUrl: 'views/assets.html',
      title: 'Assets'
  }).
  when('/AssetsDetail/:assetsId', {
      templateUrl: 'views/assetsDetail.html',
      title: 'AssetsDetail'
  })
    .otherwise({
      templateUrl: 'views/404.html',
      title: 'Error'
    });
});

//Setting HTML5 Location Mode
angular.module('insight')
  .config(function($locationProvider) {
    $locationProvider.html5Mode(true);
    $locationProvider.hashPrefix('!');
  })
  .run(function($rootScope, $route, $location, $routeParams, $anchorScroll, ngProgress, gettextCatalog, amMoment) {
    gettextCatalog.currentLanguage = defaultLanguage;
    amMoment.changeLocale(defaultLanguage);
    $rootScope.$on('$routeChangeStart', function() {
      ngProgress.start();
    });

    $rootScope.$on('$routeChangeSuccess', function() {
      ngProgress.complete();

      //Change page title, based on Route information
      $rootScope.titleDetail = '';
      $rootScope.title = $route.current.title;
      $rootScope.isCollapsed = true;
      $rootScope.currentAddr = null;

      $location.hash($routeParams.scrollTo);
      $anchorScroll();
    });
  });

// Source: public/src/js/init.js
angular.element(document).ready(function() {
  // Init the app
  // angular.bootstrap(document, ['insight']);
});

// Source: public/src/js/translations.js
angular.module('insight').run(['gettextCatalog', function (gettextCatalog) {
/* jshint -W100 */
    gettextCatalog.setStrings('de_DE', {"(Input unconfirmed)":"(Eingabe unbestätigt)","404 Page not found :(":"404 Seite nicht gefunden :(","<strong>insight</strong>  is an <a href=\"http://live.insight.is/\" target=\"_blank\">open-source Safe blockchain explorer</a> with complete REST and websocket APIs that can be used for writing web wallets and other apps  that need more advanced blockchain queries than provided by safed RPC.  Check out the <a href=\"https://github.com/safepay/insight-ui-safe\" target=\"_blank\">source code</a>.":"<strong>insight</strong> ist ein <a href=\"http://live.insight.is/\" target=\"_blank\">Open Source Safe Blockchain Explorer</a> mit vollständigen REST und Websocket APIs um eigene Wallets oder Applikationen zu implementieren. Hierbei werden fortschrittlichere Abfragen der Blockchain ermöglicht, bei denen die RPC des safed nicht mehr ausreichen. Der aktuelle <a href=\"https://github.com/safepay/insight-ui-safe\" target=\"_blank\">Quellcode</a> ist auf Github zu finden.","<strong>insight</strong> is still in development, so be sure to report any bugs and provide feedback for improvement at our <a href=\"https://github.com/safepay/insight/issues\" target=\"_blank\">github issue tracker</a>.":"<strong>insight</strong> befindet sich aktuell noch in der Entwicklung. Bitte sende alle gefundenen Fehler (Bugs) und Feedback zur weiteren Verbesserung an unseren <a href=\"https://github.com/safepay/insight-ui-safe/issues\" target=\"_blank\">Github Issue Tracker</a>.","About":"Über insight","Address":"Adresse","Age":"Alter","Application Status":"Programmstatus","Best Block":"Bester Block","Safe node information":"Safe-Node Info","Block":"Block","Block Reward":"Belohnung","Blocks":"Blöcke","Bytes Serialized":"Serialisierte Bytes","Can't connect to safed to get live updates from the p2p network. (Tried connecting to safed at {{host}}:{{port}} and failed.)":"Es ist nicht möglich mit safed zu verbinden um live Aktualisierungen vom P2P Netzwerk zu erhalten. (Verbindungsversuch zu safed an {{host}}:{{port}} ist fehlgeschlagen.)","Can't connect to insight server. Attempting to reconnect...":"Keine Verbindung zum insight-Server möglich. Es wird versucht die Verbindung neu aufzubauen...","Can't connect to internet. Please, check your connection.":"Keine Verbindung zum Internet möglich, bitte Zugangsdaten prüfen.","Complete":"Vollständig","Confirmations":"Bestätigungen","Conn":"Verbindungen","Connections to other nodes":"Verbindungen zu Nodes","Current Blockchain Tip (insight)":"Aktueller Blockchain Tip (insight)","Current Sync Status":"Aktueller Status","Details":"Details","Difficulty":"Schwierigkeit","Double spent attempt detected. From tx:":"Es wurde ein \"double Spend\" Versuch erkannt.Von tx:","Error!":"Fehler!","Fee":"Gebühr","Final Balance":"Schlussbilanz","Finish Date":"Fertigstellung","Go to home":"Zur Startseite","Hash Serialized":"Hash Serialisiert","Height":"Höhe","Included in Block":"Eingefügt in Block","Incoherence in levelDB detected:":"Es wurde eine Zusammenhangslosigkeit in der LevelDB festgestellt:","Info Errors":"Fehlerbeschreibung","Initial Block Chain Height":"Ursprüngliche Blockchain Höhe","Input":"Eingänge","Last Block":"Letzter Block","Last Block Hash (safed)":"Letzter Hash (safed)","Latest Blocks":"Letzte Blöcke","Latest Transactions":"Letzte Transaktionen","Loading Address Information":"Lade Adressinformationen","Loading Block Information":"Lade Blockinformation","Loading Selected Date...":"Lade gewähltes Datum...","Loading Transaction Details":"Lade Transaktionsdetails","Loading Transactions...":"Lade Transaktionen...","Loading...":"Lade...","Mined Time":"Block gefunden (Mining)","Mined by":"Gefunden von","Mining Difficulty":"Schwierigkeitgrad","Next Block":"Nächster Block","No Inputs (Newly Generated Coins)":"Keine Eingänge (Neu generierte Coins)","No blocks yet.":"Keine Blöcke bisher.","No matching records found!":"Keine passenden Einträge gefunden!","No. Transactions":"Anzahl Transaktionen","Number Of Transactions":"Anzahl der Transaktionen","Output":"Ausgänge","Powered by":"Powered by","Previous Block":"Letzter Block","Protocol version":"Protokollversion","Proxy setting":"Proxyeinstellung","Received Time":"Eingangszeitpunkt","Redirecting...":"Umleitung...","Search for block, transaction or address":"Suche Block, Transaktion oder Adresse","Search for block, transaction":"Suche Block, Transaktion","See all blocks":"Alle Blöcke anzeigen","Show Transaction Output data":"Zeige Abgänge","Show all":"Zeige Alles","Show input":"Zeige Eingänge","Show less":"Weniger anzeigen","Show more":"Mehr anzeigen","Size":"Größe","Size (bytes)":"Größe (bytes)","Skipped Blocks (previously synced)":"Verworfene Blöcke (bereits syncronisiert)","Start Date":"Startdatum","Status":"Status","Summary":"Zusammenfassung","Summary <small>confirmed</small>":"Zusammenfassung <small>bestätigt</small>","Sync Progress":"Fortschritt","Sync Status":"Syncronisation","Sync Type":"Art der Syncronisation","Synced Blocks":"Syncronisierte Blöcke","Testnet":"Testnet aktiv","There are no transactions involving this address.":"Es gibt keine Transaktionen zu dieser Adressse","Time Offset":"Zeitoffset zu UTC","Timestamp":"Zeitstempel","Today":"Heute","Total Amount":"Gesamtsumme","Total Received":"Insgesamt empfangen","Total Sent":"Insgesamt gesendet","Transaction":"Transaktion","Transaction Output Set Information":"Transaktions Abgänge","Transaction Outputs":"Abgänge","Transactions":"Transaktionen","Type":"Typ","Unconfirmed":"Unbestätigt","Unconfirmed Transaction!":"Unbestätigte Transaktion!","Unconfirmed Txs Balance":"Unbestätigtes Guthaben","Value Out":"Wert","Version":"Version","Waiting for blocks...":"Warte auf Blöcke...","Waiting for transactions...":"Warte auf Transaktionen...","by date.":"nach Datum.","first seen at":"zuerst gesehen am","mined":"gefunden","mined on:":"vom:","Waiting for blocks":"Warte auf Blöcke","Masternode":"Master-Knoten","debit safe address":"Hypothek Adresse","status":"status","IP":"IP","search for ip or debit safe address":"Suche nach IP oder Debit Safe Adresse","Next page":"Nächste Seite","Previous page":"Vorherige Seite","Previous":"Vorherige Seite","Waiting for masterNode...":"Warten auf Laden masternode","No masternode yet.":"Noch nicht masternode","List of assets":"Liste der Vermögenswerte","assets id":"Der Name","issue Time":"Freigabe Zeit","total issued":"Insgesamt ausgestellt","Circulation":"Ausgestellt","Waiting for assets...":"Warten auf das Laden von Asset-Informationen","No assets yet.":"Noch keine Asset-Informationen","assets summary":"Zusammenfassung der Assets","assets":"Assets","Loading assets Detail Information":"Laden von Assets Detailinformationen","Can be divided":"Ist es trennbar","sponsor":"Promoter","smallest unit":"Kleinste Einheit","release record":"Datensatz freigeben","initial release":"Erstveröffentlichung","accep address":"Adresse erhalten","transaction ID":"Transaktionen ID","unlock height":"Höhe freischalten","lock height":"Höhe verriegeln","issue assets":"Assets ausgeben","additional assets issued":"zusätzliche Vermögenswerte ausgegeben","Lastest block from date":"Heutige letzte Zeit","Older blocks from this date":"Siehe frühere Blöcke","total":"gesamt"});
    gettextCatalog.setStrings('es', {"(Input unconfirmed)":"(Entrada sin confirmar)","404 Page not found :(":"404 Página no encontrada :(","<strong>insight</strong>  is an <a href=\"http://live.insight.is/\" target=\"_blank\">open-source Safe blockchain explorer</a> with complete REST and websocket APIs that can be used for writing web wallets and other apps  that need more advanced blockchain queries than provided by safed RPC.  Check out the <a href=\"https://github.com/safepay/insight-ui-safe\" target=\"_blank\">source code</a>.":"<strong>insight</strong>  es un <a href=\"http://live.insight.is/\" target=\"_blank\">explorador de bloques de Safe open-source</a> con un completo conjunto de REST y APIs de websockets que pueden ser usadas para escribir monederos de Safe y otras aplicaciones que requieran consultar un explorador de bloques.  Obtén el código en <a href=\"http://github.com/safepay/insight\" target=\"_blank\">el repositorio abierto de Github</a>.","<strong>insight</strong> is still in development, so be sure to report any bugs and provide feedback for improvement at our <a href=\"https://github.com/safepay/insight/issues\" target=\"_blank\">github issue tracker</a>.":"<strong>insight</strong> esta en desarrollo aún, por ello agradecemos que nos reporten errores o sugerencias para mejorar el software. <a href=\"https://github.com/safepay/insight-ui-safe/issues\" target=\"_blank\">Github issue tracker</a>.","About":"Acerca de","Address":"Dirección","Age":"Edad","Application Status":"Estado de la Aplicación","Best Block":"Mejor Bloque","Safe node information":"Información del nodo Safe","Block":"Bloque","Block Reward":"Bloque Recompensa","Blocks":"Bloques","Bytes Serialized":"Bytes Serializados","Can't connect to safed to get live updates from the p2p network. (Tried connecting to safed at {{host}}:{{port}} and failed.)":"No se pudo conectar a safed para obtener actualizaciones en vivo de la red p2p. (Se intentó conectar a safed de {{host}}:{{port}} y falló.)","Can't connect to insight server. Attempting to reconnect...":"No se pudo conectar al servidor insight. Intentando re-conectar...","Can't connect to internet. Please, check your connection.":"No se pudo conectar a Internet. Por favor, verifique su conexión.","Complete":"Completado","Confirmations":"Confirmaciones","Conn":"Con","Connections to other nodes":"Conexiones a otros nodos","Current Blockchain Tip (insight)":"Actual Blockchain Tip (insight)","Current Sync Status":"Actual Estado de Sincronización","Details":"Detalles","Difficulty":"Dificultad","Double spent attempt detected. From tx:":"Intento de doble gasto detectado. De la transacción:","Error!":"¡Error!","Fee":"Tasa","Final Balance":"Balance Final","Finish Date":"Fecha Final","Go to home":"Volver al Inicio","Hash Serialized":"Hash Serializado","Height":"Altura","Included in Block":"Incluido en el Bloque","Incoherence in levelDB detected:":"Detectada una incoherencia en levelDB:","Info Errors":"Errores de Información","Initial Block Chain Height":"Altura de la Cadena en Bloque Inicial","Input":"Entrada","Last Block":"Último Bloque","Last Block Hash (safed)":"Último Bloque Hash (safed)","Latest Blocks":"Últimos Bloques","Latest Transactions":"Últimas Transacciones","Loading Address Information":"Cargando Información de la Dirección","Loading Block Information":"Cargando Información del Bloque","Loading Selected Date...":"Cargando Fecha Seleccionada...","Loading Transaction Details":"Cargando Detalles de la Transacción","Loading Transactions...":"Cargando Transacciones...","Loading...":"Cargando...","Mined Time":"Hora de Minado","Mined by":"Minado por","Mining Difficulty":"Dificultad de Minado","Next Block":"Próximo Bloque","No Inputs (Newly Generated Coins)":"Sin Entradas (Monedas Recién Generadas)","No blocks yet.":"No hay bloques aún.","No matching records found!":"¡No se encontraron registros coincidentes!","No. Transactions":"Nro. de Transacciones","Number Of Transactions":"Número de Transacciones","Output":"Salida","Powered by":"Funciona con","Previous Block":"Bloque Anterior","Protocol version":"Versión del protocolo","Proxy setting":"Opción de proxy","Received Time":"Hora de Recibido","Redirecting...":"Redireccionando...","Search for block, transaction or address":"Buscar bloques, transacciones o direcciones","Search for block, transaction ":"Buscar bloques, transacciones","See all blocks":"Ver todos los bloques","Show Transaction Output data":"Mostrar dato de Salida de la Transacción","Show all":"Mostrar todos","Show input":"Mostrar entrada","Show less":"Ver menos","Show more":"Ver más","Size":"Tamaño","Size (bytes)":"Tamaño (bytes)","Skipped Blocks (previously synced)":"Bloques Saltados (previamente sincronizado)","Start Date":"Fecha de Inicio","Status":"Estado","Summary":"Resumen","Summary <small>confirmed</small>":"Resumen <small>confirmados</small>","Sync Progress":"Proceso de Sincronización","Sync Status":"Estado de Sincronización","Sync Type":"Tipo de Sincronización","Synced Blocks":"Bloques Sincornizados","Testnet":"Red de prueba","There are no transactions involving this address.":"No hay transacciones para esta dirección","Time Offset":"Desplazamiento de hora","Timestamp":"Fecha y hora","Today":"Hoy","Total Amount":"Cantidad Total","Total Received":"Total Recibido","Total Sent":"Total Enviado","Transaction":"Transacción","Transaction Output Set Information":"Información del Conjunto de Salida de la Transacción","Transaction Outputs":"Salidas de la Transacción","Transactions":"Transacciones","Type":"Tipo","Unconfirmed":"Sin confirmar","Unconfirmed Transaction!":"¡Transacción sin confirmar!","Unconfirmed Txs Balance":"Balance sin confirmar","Value Out":"Valor de Salida","Version":"Versión","Waiting for blocks...":"Esperando bloques...","Waiting for transactions...":"Esperando transacciones...","by date.":"por fecha.","first seen at":"Visto a","mined":"minado","mined on:":"minado el:","Waiting for blocks":"Esperando bloques","Masternode":"Nodo maestro","debit safe address":"Debito direccion segura","status":"Situación","IP":"IP","search for ip or debit safe address":"Busqueda por IP o debito direccion segura","Next page":"Pagina siguiente","Previous page":"Pagina anterior","Previous":"Pagina anterior","Waiting for masterNode...":"Esperando para el nodo maestro","No masternode yet.":"No master node todavia","List of assets":"Lista de activos","assets id":"El nombre","issue Time":"Cuestión de tiempo","total issued":"Total emitido","Circulation":"La emisión se ha","Waiting for assets...":"Esperar a que la carga de los activos de información","No assets yet.":"Todavía no hay información de activos","assets summary":"Los detalles de los activos","assets":"De los activos","Loading assets Detail Information":"Se carga la información de activos","Can be divided":"Si no puede dividirse","sponsor":"Promotores","smallest unit":"La unidad mínima de","release record":"La emisión de registros","initial release":"Primera emisión","accep address":"Recibir la dirección","transaction ID":"La transacción ID","unlock height":"El desbloqueo de la altura","lock height":"El bloqueo de la altura","issue assets":"La emisión de los","additional assets issued":"Emisión adicional de activos","Lastest block from date":"La última hora de hoy","Older blocks from this date":"Ver antes de bloque","total":"Número"});
    gettextCatalog.setStrings('ja', {"(Input unconfirmed)":"(入力は未検証です)","404 Page not found :(":"404 ページがみつかりません (´・ω・`)","<strong>insight</strong>  is an <a href=\"http://live.insight.is/\" target=\"_blank\">open-source Safe blockchain explorer</a> with complete REST and websocket APIs that can be used for writing web wallets and other apps  that need more advanced blockchain queries than provided by safed RPC.  Check out the <a href=\"https://github.com/safepay/insight-ui-safe\" target=\"_blank\">source code</a>.":"<strong>insight</strong>は、safed RPCの提供するものよりも詳細なブロックチェインへの問い合わせを必要とするウェブウォレットやその他のアプリを書くのに使える、完全なRESTおよびwebsocket APIを備えた<a href=\"http://live.insight.is/\" target=\"_blank\">オープンソースのビットコインブロックエクスプローラ</a>です。<a href=\"https://github.com/safepay/insight-ui-safe\" target=\"_blank\">ソースコード</a>を確認","<strong>insight</strong> is still in development, so be sure to report any bugs and provide feedback for improvement at our <a href=\"https://github.com/safepay/insight/issues\" target=\"_blank\">github issue tracker</a>.":"<strong>insight</strong>は現在開発中です。<a href=\"https://github.com/safepay/insight/issues\" target=\"_blank\">githubのissueトラッカ</a>にてバグの報告や改善案の提案をお願いします。","About":"はじめに","Address":"アドレス","Age":"生成後経過時間","An error occured in the verification process.":"検証過程でエラーが発生しました。","An error occured:<br>{{error}}":"エラーが発生しました:<br>{{error}}","Application Status":"アプリケーションの状態","Best Block":"最良ブロック","Safe comes with a way of signing arbitrary messages.":"Safeには任意のメッセージを署名する昨日が備わっています。","Safe node information":"Safeノード情報","Block":"ブロック","Block Reward":"ブロック報酬","Blocks":"ブロック","Broadcast Raw Transaction":"生のトランザクションを配信","Bytes Serialized":"シリアライズ後の容量 (バイト)","Can't connect to safed to get live updates from the p2p network. (Tried connecting to safed at {{host}}:{{port}} and failed.)":"P2Pネットワークからライブ情報を取得するためにsafedへ接続することができませんでした。({{host}}:{{port}} への接続を試みましたが、失敗しました。)","Can't connect to insight server. Attempting to reconnect...":"insight サーバに接続できません。再接続しています...","Can't connect to internet. Please, check your connection.":"インターネットに接続できません。コネクションを確認してください。","Complete":"完了","Confirmations":"検証数","Conn":"接続数","Connections to other nodes":"他ノードへの接続","Current Blockchain Tip (insight)":"現在のブロックチェインのTip (insight)","Current Sync Status":"現在の同期状況","Details":"詳細","Difficulty":"難易度","Double spent attempt detected. From tx:":"二重支払い攻撃をこのトランザクションから検知しました：","Error message:":"エラーメッセージ:","Error!":"エラー！","Fee":"手数料","Final Balance":"最終残高","Finish Date":"終了日時","Go to home":"ホームへ","Hash Serialized":"シリアライズデータのハッシュ値","Height":"ブロック高","Included in Block":"取り込まれたブロック","Incoherence in levelDB detected:":"levelDBの破損を検知しました:","Info Errors":"エラー情報","Initial Block Chain Height":"起動時のブロック高","Input":"入力","Last Block":"直前のブロック","Last Block Hash (safed)":"直前のブロックのハッシュ値 (safed)","Latest Blocks":"最新のブロック","Latest Transactions":"最新のトランザクション","Loading Address Information":"アドレス情報を読み込んでいます","Loading Block Information":"ブロック情報を読み込んでいます","Loading Selected Date...":"選択されたデータを読み込んでいます...","Loading Transaction Details":"トランザクションの詳細を読み込んでいます","Loading Transactions...":"トランザクションを読み込んでいます...","Loading...":"ロード中...","Message":"メッセージ","Mined Time":"採掘時刻","Mined by":"採掘者","Mining Difficulty":"採掘難易度","Next Block":"次のブロック","No Inputs (Newly Generated Coins)":"入力なし (新しく生成されたコイン)","No blocks yet.":"ブロックはありません。","No matching records found!":"一致するレコードはありません！","No. Transactions":"トランザクション数","Number Of Transactions":"トランザクション数","Output":"出力","Powered by":"Powered by","Previous Block":"前のブロック","Protocol version":"プロトコルバージョン","Proxy setting":"プロキシ設定","Raw transaction data":"トランザクションの生データ","Raw transaction data must be a valid hexadecimal string.":"生のトランザクションデータは有効な16進数でなければいけません。","Received Time":"受信時刻","Redirecting...":"リダイレクトしています...","Search for block, transaction or address":"ブロック、トランザクション、アドレスを検索","Search for block, transaction":"検索ブロック、取引","See all blocks":"すべてのブロックをみる","Send transaction":"トランザクションを送信","Show Transaction Output data":"トランザクションの出力データをみる","Show all":"すべて表示","Show input":"入力を表示","Show less":"隠す","Show more":"表示する","Signature":"署名","Size":"サイズ","Size (bytes)":"サイズ (バイト)","Skipped Blocks (previously synced)":"スキップされたブロック (同期済み)","Start Date":"開始日時","Status":"ステータス","Summary":"概要","Summary <small>confirmed</small>":"サマリ <small>検証済み</small>","Sync Progress":"同期の進捗状況","Sync Status":"同期ステータス","Sync Type":"同期タイプ","Synced Blocks":"同期されたブロック数","Testnet":"テストネット","The message failed to verify.":"メッセージの検証に失敗しました。","The message is verifiably from {{verification.address}}.":"メッセージは{{verification.address}}により検証されました。","There are no transactions involving this address.":"このアドレスに対するトランザクションはありません。","This form can be used to broadcast a raw transaction in hex format over\n        the Safe network.":"このフォームでは、16進数フォーマットの生のトランザクションをSafeネットワーク上に配信することができます。","This form can be used to verify that a message comes from\n        a specific Safe address.":"このフォームでは、メッセージが特定のSafeアドレスから来たかどうかを検証することができます。","Time Offset":"時間オフセット","Timestamp":"タイムスタンプ","Today":"今日","Total Amount":"safe総量","Total Received":"総入金額","Total Sent":"総送金額","Transaction":"トランザクション","Transaction Output Set Information":"トランザクションの出力セット情報","Transaction Outputs":"トランザクションの出力","Transaction succesfully broadcast.<br>Transaction id: {{txid}}":"トランザクションの配信に成功しました。<br>トランザクションID: {{txid}}","Transactions":"トランザクション","Type":"タイプ","Unconfirmed":"未検証","Unconfirmed Transaction!":"未検証のトランザクションです！","Unconfirmed Txs Balance":"未検証トランザクションの残高","Value Out":"出力値","Verify":"検証","Verify signed message":"署名済みメッセージを検証","Version":"バージョン","Waiting for blocks...":"ブロックを待っています...","Waiting for transactions...":"トランザクションを待っています...","by date.":"日毎。","first seen at":"最初に発見された日時","mined":"採掘された","mined on:":"採掘日時:","(Mainchain)":"(メインチェーン)","(Orphaned)":"(孤立したブロック)","Bits":"Bits","Block #{{block.height}}":"ブロック #{{block.height}}","BlockHash":"ブロックのハッシュ値","Blocks <br> mined on:":"ブロック <br> 採掘日","Coinbase":"コインベース","Hash":"ハッシュ値","LockTime":"ロック時間","Merkle Root":"Merkleルート","Nonce":"Nonce","Ooops!":"おぉっと！","Output is spent":"出力は使用済みです","Output is unspent":"出力は未使用です","Scan":"スキャン","Show/Hide items details":"アイテムの詳細を表示または隠す","Waiting for blocks":"ブロックを待っています","by date. {{detail}} {{before}}":"日時順 {{detail}} {{before}}","scriptSig":"scriptSig","{{tx.confirmations}} Confirmations":"{{tx.confirmations}} 検証","<span class=\"glyphicon glyphicon-warning-sign\"></span> (Orphaned)":"<span class=\"glyphicon glyphicon-warning-sign\"></span> (孤立したブロック)","<span class=\"glyphicon glyphicon-warning-sign\"></span> Incoherence in levelDB detected: {{vin.dbError}}":"<span class=\"glyphicon glyphicon-warning-sign\"></span> Incoherence in levelDB detected: {{vin.dbError}}","Waiting for blocks <span class=\"loader-gif\"></span>":"ブロックを待っています <span class=\"loader-gif\"></span>","Masternode":"メインノード","debit safe address":"担保アドレス","status":"状態","IP":"IPアドレス","search for ip or debit safe address":"検索ipアドレス又は抵当","Next page":"次のページ","Previous page":"前のページ","Waiting for masterNode...":"ロードを待つmasternode","No masternode yet.":"まだありませんmasternode","List of assets":"資産リスト","assets id":"名称","issue Time":"発行時間","total issued":"総量を発行する","Circulation":"発行部数","Waiting for assets...":"資産情報のロードを待つ","No assets yet.":"資産情報はまだありません","assets summary":"資産の詳細","assets":"資産","Loading assets Detail Information":"資産情報をロードしている","Can be divided":"分けるかどうか","sponsor":"発起人","smallest unit":"最小単位","release record":"発行記録","initial release":"初発行","accep address":"アドレスを受信する","transaction ID":"取引ID","unlock height":"解除高","lock height":"高さをロックする","issue assets":"資産を発行する","additional assets issued":"追加発行資産","Lastest block from date":"今日の最新の時間","Older blocks from this date":"早くのブロックを調べる","Previous":"前のページ","total":"総数"});
    gettextCatalog.setStrings('zh_CN', {"(Input unconfirmed)":"(输入未确认)","404 Page not found :(":"404 找不到界面 :(","<strong>insight</strong>  is an <a href=\"http://live.insight.is/\" target=\"_blank\">open-source safe blockchain explorer</a> with complete REST and websocket APIs that can be used for writing web wallets and other apps  that need more advanced blockchain queries than provided by safed RPC.  Check out the <a href=\"https://github.com/safepay/insight-ui-safe\" target=\"_blank\">source code</a>.":"<strong>insight</strong>  es un <a href=\"http://live.insight.is/\" target=\"_blank\">explorador de bloques de safe open-source</a> con un completo conjunto de REST y APIs de websockets que pueden ser usadas para escribir monederos de safes y otras aplicaciones que requieran consultar un explorador de bloques.  Obtén el código en <a href=\"http://github.com/safepay/insight\" target=\"_blank\">el repositorio abierto de Github</a>.","<strong>insight</strong> is still in development, so be sure to report any bugs and provide feedback for improvement at our <a href=\"https://github.com/safepay/insight/issues\" target=\"_blank\">github issue tracker</a>.":"<strong>insight</strong> esta en desarrollo aún, por ello agradecemos que nos reporten errores o sugerencias para mejorar el software. <a href=\"https://github.com/safepay/insight-ui-safe/issues\" target=\"_blank\">Github issue tracker</a>.","About":"关于","Address":"地址","Age":"生成时间","Application Status":"状态","Best Block":"最高区块","Safe node information":"Safe节点信息","Network":"网络","Block":"区块","BlockHash":"区块Hash","Block Reward":"区块奖励","Blocks":"区块","Bytes Serialized":"字节序列化","Can't connect to safed to get live updates from the p2p network. (Tried 无法连接到Safed {{host}}:{{port}} 失败)":"No se pudo conectar a safed para obtener actualizaciones en vivo de la 无法连接到safed获得更新的体内","Can't connect to insight server. Attempting to reconnect...":"无法连接到Insight服务器。试图重新连接...","Can't connect to internet. Please, check your connection.":"不能连接到互联网。请检查您的连接。","Complete":"完成","Confirmations":"确认","Conn":"连接","Connections to other nodes":"连接的节点数","Current Blockchain Tip (insight)":"当前最高区块（insight）","Current Sync Status":"当前同步状态","Details":"详情","Difficulty":"难度","Double spent attempt detected. From tx:":"检测到双重花费，交易ID:","Error!":"错误!","Fee":"费用","Final Balance":"最终余额","Finish Date":"最终时间","Go to home":"返回首页","Hash Serialized":"序列化hash","Height":"高度","Included in Block":"来自区块","Incoherence in levelDB detected:":"检测到不是来自levelDB:","Info Errors":"错误信息","Initial Block Chain Height":"区块高度","Input":"输入","Last Block":"最新区块","Last Block Hash (safed)":"最新的区块hash(safed)","Latest Blocks":"最新区块","Latest Transactions":"最新交易","Loading Address Information":"加载地址信息","Loading Block Information":"加载区块信息","Loading Selected Date...":"加载区块信息...","Loading Transaction Details":"加载交易详情","Loading Transactions...":"加载交易...","Loading...":"加载中...","Mined Time":"开采时间","Mined by":"开采人","Mining Difficulty":"开采难度","Next Block":"下一个区块","No Inputs (Newly Generated Coins)":"没有输入(新生成的币)","No blocks yet.":"还没有区块.","No matching records found!":"没有匹配数据!","No. Transactions":"交易数量","Number Of Transactions":"交易数量","Output":"输出","Powered by":"技术支持","Previous Block":"上一个块","Protocol version":"协议版本","Proxy setting":"代理设置","Received Time":"接收时间","Redirecting...":"重定向...","Search for block, transaction or address":"搜索区块、交易或者地址","Search for block, transaction":"搜索区块、交易","See all blocks":"所有区块","Show Transaction Output data":"显示交易输出数据","Show all":"显示全部","Show input":"显示输入","Show less":"收起","Show more":"展开","Size":"大小","Size (bytes)":"大小 (bytes)","Skipped Blocks (previously synced)":"忽略的区块（之前同步）","Start Date":"开始时间","Status":"状态","Summary":"摘要","Summary <small>confirmed</small>":"摘要 <small>确认</small>","Sync Progress":"同步进度","Sync Status":"同步状态","Sync Type":"同步类型","Synced Blocks":"同步区块","Testnet":"测试网络","There are no transactions involving this address.":"没有涉及此地址的交易。","Time Offset":"时间偏移","Timestamp":"时间","Today":"今天","Total Amount":"总金额","Total Received":"总接收","Total Sent":"总发送","Transaction":"交易","Transaction Output Set Information":"交易输出设置信息","Transaction Outputs":"交易输出","Transactions":"交易","Type":"类型","Unconfirmed":"未确认","Unconfirmed Transaction!":"未确认交易!","Unconfirmed Txs Balance":"未确认交易余额","Value Out":"金额","Version":"版本","Waiting for blocks...":"等待区块信息...","Waiting for transactions...":"等待交易信息...","by date.":"日期 ","first seen at":"第一次出现","Reward":"奖励","mined":"开采","mined on:":"生成时间:","Waiting for blocks":"等待区块","Masternode":"主节点","debit safe address":"抵押地址","status":"状态","IP":"IP地址","search for ip or debit safe address":"搜索ip或者抵押地址","Next page":"下一页","Previous page":"上一页","Waiting for masterNode...":"等待加载masternode","No masternode yet.":"还没有masternode","List of assets":"资产列表","assets id":"名称","issue Time":"发行时间","total issued":"发行总量","Circulation":"已发行量","Waiting for assets...":"等待加载资产信息","No assets yet.":"还没有资产信息","assets summary":"资产详情","assets":"资产","Loading assets Detail Information":"正在加载资产信息","Can be divided":"是否可分","sponsor":"发起人","smallest unit":"最小单位","release record":"发行记录","initial release":"首次发行","accep address":"接收地址","transaction ID":"交易ID","unlock height":"解锁高度","lock height":"锁定高度","issue assets":"发行资产","additional assets issued":"追加发行资产","Lastest block from date":"今天最新时间","Older blocks from this date":"查看更早的区块","operation":"操作","concern node":"关注节点","abolish concern":"取消关注","master node list":"主节点列表","master node of concern":"关注的主节点","Already concerned":"已经关注","Previous":"上一页","total":"总数"});
/* jshint +W100 */
}]);