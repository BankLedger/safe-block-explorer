'use strict';
angular.module('insight.masternodeMobile').controller('MastrtnodeMobileController',
    function ($scope, $modal, amMoment, MasterNode, updateMatterNodeStatus) {
        var mobileType = "undefined";
        var userAgent = window.navigator.userAgent;
        var selfPage = 1;
        var jumpPage = 0;
        var thisPage = 0;
        var displayLength = 7;

        $scope.count = "";

        window.isApp = false;
        var dataBase = {};
        // if(window.intervalName){
        //     clearInterval(window.intervalName);
        // }
        //获取已经关注的节点保存在当前变量中
        var followNodeArray = [];
        var followNodeMap = {};

        $scope.Mobile = function () {
            createDatabase(); //创建数据库实例
            $scope.listmobile(1);
        };

        $scope.read = function () {
            if (userAgent.indexOf("Android") != -1) {
                mobileType = "Android";
            } else if (userAgent.indexOf("iPhone") != -1) {
                mobileType = "iPhone";
            } else if (userAgent.indexOf("SymbianOS") != -1) {
                mobileType = "SymbianOS";
            } else if (userAgent.indexOf("Windows Phone") != -1) {
                mobileType = "Windows Phone";
            } else if (userAgent.indexOf("iPad") != -1) {
                mobileType = "iPhone";
            } else if (userAgent.indexOf("iPod") != -1) {
                mobileType = "iPhone";
            }

            //获取所有master node
            $scope.listmobile(1);

            var ua = navigator.userAgent.toLowerCase();//获取判断用的对象
            if (ua.match(/MicroMessenger/i) == "micromessenger") {
                //在微信中打开
                mobileType = "micromessenger";
                createDatabase(); //创建数据库实例
            } else {
                //如果不是微信登录在调用app 方法获取数据
                window.isApp = true;
                if (mobileType == "iPhone") {

                }
                getFollowMasterNodeList();
            }
        };

        // web database start code --------------------------------------------------------
        var createDatabase = function () {
            var request = window.indexedDB.open('safeDB', 1);
            request.onsuccess = function () {
                console.log("创建或者打开数据库成功！");
                dataBase = request.result;
                console.log(request);
                selectAll();
            };
            request.onerror = function () {
                console.log("创建或者打开数据库失败！" + request.error);
            };
            request.onupgradeneeded = function () {
                console.log("第一次创建数据库或者数据库升级");
                dataBase = request.result;
                /*var FollowMasterNode = */
                dataBase.createObjectStore("FollowMasterNode", {keyPath: "id"});
            }
        };

        $scope.insert = function (node) {
            insertMasterNode(node);
        };

        $scope.delete = function (node) {
            deleteMasterNode(node);
        };

        function selectAll() {
            var transaction = dataBase.transaction('FollowMasterNode', "readonly");
            var objectStore = transaction.objectStore("FollowMasterNode");
            var saveRequest = objectStore.get("list");
            saveRequest.onerror = function (event) {
                console.log(event);
            };
            saveRequest.onsuccess = function () {
                var result = saveRequest.result;
                if (result) {
                    setFollowNodeArray(result.value);
                    $scope.masternode = judgmentHasBeenConcerned($scope.masternode);
                    updateFollowMasterNodeStatus(Object.keys(result.value));
                }
            }
        }

        function insertMasterNode(node) {
            var transaction = dataBase.transaction('FollowMasterNode', "readwrite");
            var objectStore = transaction.objectStore("FollowMasterNode");
            followNodeMap[node.address] = {
                address: node.address,
                ip: node.ip,
                status: node.status
            };

            var saveRequest = objectStore.put({
                id: "list",
                value: followNodeMap
            });

            saveRequest.onerror = function () {
                console.log("error 存储 FollowMasterNode:" + JSON.stringify(node));
                removeMasterNodeFunc(node);
                judgmentHasBeenConcerned($scope.masternode);
            };
            mobileAddMasterNodeCallback(node);
        }

        // FollowMasterNode
        function deleteMasterNode(node) {
            var transaction = dataBase.transaction("FollowMasterNode", "readwrite");
            var objectStore = transaction.objectStore("FollowMasterNode");
            delete followNodeMap[node.address];
            var deleteRequest = objectStore.put({
                id: "list",
                value: followNodeMap
            });
            deleteRequest.onerror = function (e) {
                console.log("Error delete record:", e);
                mobileAddMasterNodeCallback(node);
            };
            removeMasterNodeFunc(node);
            if ($scope.isFollow == true) {
                $scope.judgeIsFollow(thisPage);
            } else {
                $scope.masternode = judgmentHasBeenConcerned($scope.masternode);
            }
        }

        // update the web database master node data to the latest
        function updateMasterNode(node) {
            var transaction = dataBase.transaction('FollowMasterNode', "readwrite");
            var objectStore = transaction.objectStore("FollowMasterNode");
            followNodeMap[node.address] = node;

            var updateRequest = objectStore.put({
                id: "list",
                value: followNodeMap
            });
            setFollowNodeArray(followNodeMap);
            updateRequest.onerror = function (e) {
                console.log("Error delete record:", e);
            };
        }

        var setFollowNodeArray = function (result) {  //只对刚获取的数据库数据和更新数据使用,其他不用
            followNodeArray = [];
            followNodeMap = result;
            var keys = Object.keys(followNodeMap);
            for (var i = 0; i < keys.length; i++) {
                followNodeArray.push(followNodeMap[keys[i]]);
            }
        };

// web database end code -----------------------------------------------------

        /**
         * 切换标签使用
         * @param page
         */
        $scope.judgeIsFollow = function (page) {
            selfPage = page;
            if ($scope.isFollow) {
                $scope.followNode(page);
            } else {
                $scope.listmobile(page);
            }
        };

// window.intervalName = setInterval(function () {
//     var option = {
//         pageNum: thisPage,
//         params: $scope.searchParams || ""
//     }
//     if ($scope.MasterNodeListTabClass == "active") {
//         $scope.listmobile(option);
//     }
// }, 60 * 1000);

        /**
         * 获取所有诸暨店的信息
         * @param page
         */
        $scope.listmobile = function (page) { //默认显示所有
            page = page || 1;
            if (page > 1) {
                if (page > $scope.maxPage && $scope.MasterNodeListTabClass == "active") {
                    return;
                } else if (page < 1) {
                    return;
                } else if (thisPage == page && $scope.MasterNodeListTabClass == "active") {
                    return;
                }
            }

            thisPage = page;
            var option = {
                pageNum: page,
                params: $scope.searchParams || ""
            };
            getMasterNode(option, function (masternode) {
                $scope.masternode = masternode.list;
                $scope.rate = masternode.rate;
                $scope.more = masternode.more;
                $scope.count = masternode.listLength;

                $scope.maxPage = masternode.maxPage;
                var startPage = getStartPageNum(page, masternode.maxPage);
                var endPage = getEndPageNum(page, masternode.maxPage);
                setPageButs(page, masternode.maxPage);
                $scope.masternode = judgmentHasBeenConcerned(masternode.list);
                $scope.prePage = page - 1;
                $scope.nextPage = page + 1;
                $scope.isFollow = false;
                $scope.MasterNodeListTabClass = "active";
                $scope.followNodeListTabClass = "";
            });
        };

        // 设置分页按钮
        function setPageButs(page, maxPage) {
            var startPage = Math.round(page - displayLength / 2 + 1);
            var endPage = Math.round(page + displayLength / 2);
            if (startPage <= 1) {
                startPage = 1;
                endPage = startPage + displayLength - 1;
                if (endPage >= maxPage - 1) {
                    endPage = maxPage - 1;
                }
            }
            if (endPage >= maxPage - 1) {
                endPage = maxPage;
                startPage = maxPage - displayLength + 1;
                if (startPage <= 1) {
                    startPage = 1;
                }
            }
            for (var i = startPage; i <= endPage; i++) {
                $scope.pageBut.push({
                    num: i,
                    class: i == page ? "click" : ""
                });
            }
        }

        /**
         * 搜索功能
         */
        $scope.searchFunc = function () {   //搜索
            $scope.searchParams = $scope.searchValue;
            var option = {
                params: $scope.searchValue,
                pageNum: 1
            };
            getMasterNode(option, function (masternode) {
                $scope.rate = masternode.rate;
                $scope.more = masternode.more;
                $scope.count = masternode.listLength;
                for (var i = 1; i < 3 && i <= masternode.maxPage; i++) {
                    $scope.pageBut.push({
                        num: i,
                        class: i == 1 ? "click" : ""
                    });
                }
                $scope.masternode = judgmentHasBeenConcerned(masternode.list);
                $scope.prePage = 0;
                $scope.nextPage = 2;
            })
        };

//获取节点信息
        var getMasterNode = function (option, callback) {
            $scope.masternode = [];
            MasterNode.get({
                pageNum: option.pageNum || 1,
                params: option.params || ""
            }, function (masternode) {
                $scope.pageBut = [];
                callback(masternode)
            })
        };

        /**
         * 如果节点被关注则显示已关注
         * @param list
         */
        var judgmentHasBeenConcerned = function (list) {
            list.forEach(function (n) {
                n.beforeFollow = false;
                followNodeArray.forEach(function (fn) {
                    if (fn.address === n.address) {
                        if (fn.status != n.status) {
                            //如果状态被改变，则更新数据库中的数据
                            updateMasterNode(n);
                        }
                        n.beforeFollow = true;
                    }
                })
            });
            return list;
        };

//绑定控件元素值
        $scope.$watch('search', function (searchValue) {
            $scope.searchValue = searchValue;
        });

        /**
         * 添加关注主节点的方法
         * @param node
         */
        $scope.addMasterNodeForMobile = function (node) {
            var result = 0;
            if (mobileType === "Android") {
                window.android.saveMasternode(JSON.stringify(node));
                result = 1;
            } else if (mobileType === "iPhone") {
                window.webkit.messageHandlers.iosAddFollowMasterNode.postMessage(JSON.stringify(node));
                result = 1;
            } else if (mobileType === "SymbianOS") {
            } else if (mobileType === "Windows phone") {
            } else if (mobileType == "micromessenger") {
                insertMasterNode(node);
            }
            if (result == 1) {
                mobileAddMasterNodeCallback(node);
            }
        };

        function saveMasternode(node) {
            return window.android.saveMasternode(node);
        }

//添加关注节点的处理方法
        var mobileAddMasterNodeCallback = function (node) {
            followNodeArray.push(node);
            $scope.masternode = judgmentHasBeenConcerned($scope.masternode);
        };

        /**
         * 删除关注节点的方法
         * @param node
         */
        $scope.removeMasterNodeForMobile = function (node) {
            var result = 0;
            if (mobileType === "Android") {
                result = window.android.deleteMasternode(JSON.stringify(node));
            } else if (mobileType === "iPhone") {
                window.webkit.messageHandlers.iosDeleteFollowMasterNode.postMessage(JSON.stringify(node));
                result = 1;
            } else if (mobileType === "SymbianOS") {
            } else if (mobileType === "Windows phone") {
            } else if (mobileType == "micromessenger") {
                deleteMasterNode(node.address);
                result = 1;
            }
            if (result == 1) {
                removeMasterNodeFunc(node);
                judgmentHasBeenConcerned($scope.masternode);
            }
        };

//删除关注节点后处理数据
        var removeMasterNodeFunc = function (node) {
            followNodeArray.forEach(function (n, i) {
                if (n.address === node.address) {
                    followNodeArray.remove(i);
                    if ($scope.isFollow == true) {
                        $scope.judgeIsFollow(thisPage);
                    } else {
                        $scope.masternode = judgmentHasBeenConcerned($scope.masternode);
                    }
                    return;
                }
            });
        };

        /**
         *  手机获取已经关注过的主节点方法
         */
        function getFollowMasterNodeList() {
            if (mobileType === "Android") {
                followNodeArray = JSON.parse(window.android.getMasternode());
            } else if (mobileType === "iPhone") {
                // 获取IOS关注的节点信息，需要由ios主动传值过来，window.getIosFoloowMasterNodeList 方法来进行操作
                //getIosFoloowMasterNodeList()
                setTimeout(function () {
                    window.webkit.messageHandlers.iosInit.postMessage();
                }, 3 * 1000);
                return;
            } else if (mobileType === "SymbianOS") {
            } else if (mobileType === "Windows phone") {
            }
            $scope.masternode = judgmentHasBeenConcerned($scope.masternode);
            appFollowMasterNodeArrayToJson(followNodeArray);

        }

        function appFollowMasterNodeArrayToJson(array) {
            var keys = [];
            array.forEach(function (arr) {
                keys.push(arr.address);
            });
            updateFollowMasterNodeStatus(keys);
        }

        /**
         * ios 获取关注的主节点
         */
        window.getIosFoloowMasterNodeList = function (list) {
            followNodeArray = JSON.parse(list);
            appFollowMasterNodeArrayToJson(followNodeArray);
            $scope.masternode = judgmentHasBeenConcerned($scope.masternode);
        };

        /**
         * 处理关注节点的显示问题
         * @param page
         */
        $scope.followNode = function (page) {
            $scope.masternode = [];
            if (page > 1) {
                if (page > $scope.maxPage && $scope.followNodeListTabClass == "active") {
                    return;
                } else if (page < 1) {
                    return;
                } else if (thisPage == page && $scope.followNodeListTabClass == "active") {
                    return;
                }
            }
            thisPage = page;
            for (var i = (page - 1) * 10; i < page * 10; i++) {
                if (followNodeArray[i]) {
                    $scope.masternode.push(followNodeArray[i]);
                    continue;
                }
                break;
            }

            $scope.more = followNodeArray.length / 10 > page;
            $scope.prePage = page - 1;
            $scope.nextPage = page + 1;
            $scope.isFollow = true;
            var maxPage = Math.ceil(followNodeArray.length / 10);
            $scope.maxPage = maxPage;
            $scope.pageBut = [];
            var startPage = getStartPageNum(page, maxPage);
            var endPage = getEndPageNum(page, maxPage);

            for (var j = startPage; j <= endPage; j++) {
                $scope.pageBut.push({
                    num: j,
                    class: j == page ? "click" : ""
                });
            }
            $scope.MasterNodeListTabClass = "";
            $scope.followNodeListTabClass = "active";
        };

//获取结束的页数
        function getEndPageNum(page, maxPage) {
            return page + maxPage > maxPage ? maxPage : page + maxPage;
        }

//获取开始的页数
        function getStartPageNum(page, maxPage) {
            return page - maxPage <= 0 ? 1 : page - maxPage;
        }

        /**
         * 跳转分页
         */
        $scope.$watch('jumpPage', function (page) { //绑定控件元素值
            jumpPage = parseInt(page) || 0;
        });
 3
        $scope.jumpPageBut = function () {
            if (jumpPage > 0 && thisPage != jumpPage) {
                if (jumpPage > $scope.maxPage) {
                    jumpPage = parseInt($scope.maxPage);
                }
                $scope.judgeIsFollow(jumpPage);
            }
        };

        var updateFollowMasterNodeStatus = function (addresses) {
            updateMatterNodeStatus.get({addresses: addresses}, function (data) {
                data = data.data;
                var keys = Object.keys(data);
                keys.forEach(function (key) {
                    if (data[key].address == followNodeMap[key].address) {
                        if (data[key].status != followNodeMap[key].status) {
                            updateMasterNode(data[key]);
                        }
                    }
                });
            });
        }

    });
